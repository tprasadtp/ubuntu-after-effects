#!/usr/bin/env bash
# Copyright (c) 2022 Prasad Tengse
# SPDX-License-Identifier: GPL-3.0-only
# shellcheck disable=SC2059,SC2154,SC2155
set -o pipefail

function __init_core_variables() {
  declare AE_RUN_VARLIST_CHECK_OUTPUT="${!AE_*}"
  if [[ -n ${AE_RUN_VARLIST_CHECK_OUTPUT} ]]; then
    printf "\e[31m✕ Following reserved variables are set [${AE_RUN_VARLIST_CHECK_OUTPUT}]! \e[0m \n"
    printf "\e[31m✕ Script cannot continue as it might intefere with its functions! \e[0m \n"
    exit 3
  fi

  # Script
  readonly AE_SCRIPT=$(basename "$0")
  # Start tik
  readonly AE_EXEC_START=$(date +%s)
  # Version
  readonly AE_VERSION="9.3.0"

  # ERR
  declare -a AE_RUN_STACK_ERR

  #colors for display
  readonly AE_COLOR_YELLOW=$'\e[38;5;220m'
  readonly AE_COLOR_GREEN=$'\e[32m'
  readonly AE_COLOR_RED=$'\e[31m'
  readonly AE_COLOR_NC=$'\e[0m'

  # Log handler indicator
  AE_RUN_FILELOGGER_ACTIVE="false"

  # Handle Signals
  trap term_exit_handler EXIT
  trap ctrl_c_signal_handler INT
  trap term_signal_handler SIGTERM TERM

  # Extra colors
  readonly AE_COLOR_BLUE=$'\e[38;5;159m'
  readonly AE_COLOR_CYAN=$'\e[38;5;51m'
  readonly AE_COLOR_ORANGE=$'\e[38;5;208m'
  readonly AE_COLOR_TEAL=$'\e[38;5;192m'
  readonly AE_COLOR_PINK=$'\e[38;5;212m'
  readonly AE_COLOR_GRAY=$'\e[38;5;246m'
  readonly AE_COLOR_LGRAY=$'\e[38;5;240m'
  readonly AE_COLOR_MAGENTA=$'\e[38;5;219m'

  readonly AE_RUN_BASE_DIR="$(pwd -P)"

  #Initialize printf variables
  readonly AE_LOG_PHASE_CORE="(CORE)"
  readonly AE_LOG_PHASE_REPO="(REPO)"
  readonly AE_LOG_PHASE_PPA="(PPA)"
  readonly AE_LOG_PHASE_DEB="(DPKG)"
  readonly AE_LOG_PHASE_APT="(APT)"
  readonly AE_LOG_PHASE_APTKEY="(KEYS)"
  readonly AE_LOG_PHASE_SNAP="(SNAP)"
  readonly AE_LOG_PHASE_BIN="(BIN)"

}

# Signal handler
function ctrl_c_signal_handler() {
  log_error "User Interrupt! CTRL-C"
  exit 4
}

# Signal handler
function term_signal_handler() {
  log_error "User Interrupt! SIGTERM"
  exit 4
}

# Cleanup handler
function term_exit_handler() {
  declare -r exit_code="$?"
  if [[ $AE_RUN_ENABLE_CLEANUP_HANDLER == "true" ]]; then
    declare cleanup_status=0
    log_stage "Cleanup and Exit"
    log_debug "Removing temporary files"
    if [[ -d ${AE_RUN_TMP_DIR} ]]; then
      if ! rm -f "${AE_RUN_TMP_DIR}"/*; then
        cleanup_status=1
      fi

      if ! rmdir "${AE_RUN_TMP_DIR}"; then
        cleanup_status=1
      fi
    fi

    if [[ $cleanup_status -gt 0 ]]; then
      log_error "Failed to remove temporary files"
      log_error "Ignoring this error as they will be cleaned up by systemd"
    fi

    readonly AE_EXEC_END="$(date +%s)"
    readonly AE_EXEC_TIME="$((AE_EXEC_END - AE_EXEC_START))"
    log_debug "$AE_SCRIPT took $AE_EXEC_TIME seconds to complete."

    if [[ ${#AE_RUN_STACK_ERR} -gt 0 ]]; then
      log_error "Some Errors occured during installation!"
      for i in "${!AE_RUN_STACK_ERR[@]}"; do
        log_error "ERR-$((i + 1)) - ${AE_RUN_STACK_ERR[$i]}"
        # error did not lead to exit but we will exit with non zero indicating error occured
        # otherwise dont alter it
        if [[ $exit_code -eq 0 ]]; then
          exit 1
        fi
      done
    else
      log_debug "Error stack is clean :)"
    fi
  fi
}

function __init_logfile() {
  readonly AE_LOG_FILE="${AE_RUN_BASE_DIR}/logs/after-effects.log"
  local bool_created_logfile

  if ! mkdir -p "${AE_RUN_BASE_DIR}/logs"; then
    log_and_exit "Failed to create Failed to create logs folder" 2
  fi

  # tmp dir
  if tmp_dir="$(mktemp -d)"; then
    AE_RUN_ENABLE_CLEANUP_HANDLER="true"
  else
    log_and_exit "Failed to create tmp folder" 2
  fi

  declare -gr AE_RUN_TMP_DIR="${tmp_dir}"

  # if file not exists touch it
  if [[ ! -f ${AE_LOG_FILE} ]]; then
    if touch "${AE_LOG_FILE}"; then
      bool_created_logfile="true"
    else
      log_and_exit "Failed to create logfile!${AE_COLOR_NC}" 2
    fi
  fi

  # check if logs can be written
  if [[ -w $AE_LOG_FILE ]]; then
    if touch "${AE_LOG_FILE}"; then
      AE_RUN_FILELOGGER_ACTIVE="true"
      [[ $bool_created_logfile == "true" ]] && log_debug "Created log file: ${AE_LOG_FILE}"
      log_debug "Initialized logging"
    else
      AE_RUN_FILELOGGER_ACTIVE="false"
      log_error "Failed to write to log file ${AE_LOG_FILE}"
      exit 2
    fi
  else
    log_and_exit "Log file - ${AE_LOG_FILE} is not writable!" 2
  fi
}

function __logger_core() {
  if [[ $# -ne 2 ]]; then
    return
  else
    declare -r lvl="${1}"
    declare -r lvl_msg="${2}"
    declare -r lvl_ts="$(date)"
    declare lvl_console="1"
    declare lvl_prefix="  "
    declare lvl_nc="${AE_COLOR_NC}"

    case ${lvl} in
    stage)
      declare -r lvl_str="INFO"
      declare -r lvl_sym="➜"
      declare -r lvl_color="${AE_COLOR_MAGENTA}"
      declare -r lvl_prefix=""
      ;;
    trace)
      declare -r lvl_str="VERBOSE"
      declare -r lvl_sym="»"
      declare -r lvl_color="${AE_COLOR_LGRAY}"
      [[ ${AE_DEBUG} -lt 2 ]] && lvl_console="0"
      ;;
    variable | var)
      declare -r lvl_str="VERBOSE"
      declare -r lvl_sym="»"
      declare -r lvl_color="${AE_COLOR_LGRAY}"
      [[ ${AE_DEBUG} -lt 2 ]] && lvl_console="0"
      ;;
    debug)
      declare -r lvl_str="DEBUG"
      declare -r lvl_sym="•"
      declare -r lvl_color="${AE_COLOR_GRAY}"
      [[ ${AE_DEBUG} -lt 1 ]] && lvl_console="0"
      ;;
    info)
      declare -r lvl_str="INFO"
      declare -r lvl_sym="•"
      declare -r lvl_color=""
      declare -r lvl_nc=""
      declare -r lvl_console="1"
      ;;
    success)
      declare -r lvl_str="INFO"
      declare -r lvl_sym="•"
      declare -r lvl_color="${AE_COLOR_TEAL}"
      ;;
    dev)
      declare -r lvl_str="NOTICE"
      declare -r lvl_sym="•"
      declare -r lvl_color="${AE_COLOR_ORANGE}"
      ;;
    notice)
      declare -r lvl_str="NOTICE"
      declare -r lvl_sym="•"
      declare -r lvl_color="${AE_COLOR_CYAN}"
      ;;
    warn | warning)
      declare -r lvl_str="WARNING"
      declare -r lvl_sym="•"
      declare -r lvl_color="${AE_COLOR_YELLOW}"
      ;;
    error)
      declare -r lvl_str="ERROR"
      declare -r lvl_sym="•"
      declare -r lvl_color="${AE_COLOR_RED}"
      ;;
    critical)
      declare -r lvl_str="CRITICAL"
      declare -r lvl_sym="✖"
      declare -r lvl_color="${AE_COLOR_RED}"
      declare -r lvl_prefix=""
      ;;
    esac
  fi

  if [[ $lvl_console -eq 1 ]]; then
    printf "%s%s%s %s %s\n" "${lvl_color}" "${lvl_prefix}" "${lvl_sym}" "${lvl_msg}" "${lvl_nc}"
  fi
  if [[ $AE_RUN_FILELOGGER_ACTIVE == "true" ]]; then
    printf "%s %-25s %-10s %s\n" "${lvl_ts}" "${FUNCNAME[2]}" "[${lvl_str}]" "$lvl_msg" >>"$AE_LOG_FILE"
  fi

}

function log_and_exit() {
  # ARG-1 log msg
  # ARG-2 exit code int
  local msg="$1"
  local code="${2:-1}"
  __logger_core "critical" "$msg"
  exit "${code}"
}

function log_info() {
  __logger_core "info" "${1}"
}

function log_debug() {
  __logger_core "debug" "${1}"
}

function log_success() {
  __logger_core "success" "${1}"
}

function log_warn() {
  __logger_core "warn" "${1}"
}

function log_stage() {
  local msg="$1"
  __logger_core "stage" "${msg}"
}

function log_error() {
  __logger_core "error" "${1}"
}

function log_dev() {
  __logger_core "dev" "${1}"
}

function log_notice() {
  __logger_core "notice" "${1}"
}

function log_var() {
  local var
  var="$1"
  __logger_core "variable" "$(printf "%-35s - %-10s\n" "${var}" "${!var}")"
}

function log_trace() {
  local line msg
  # This function adds time stamp to logs without using external utilities
  # Output will be automatically written to $AE_LOG_FILE
  # Arguments : 1
  # ARG -1: printf variable for formatting the log
  # Usage command | _add_timestamp_to_logs "$1"
  while IFS= read -r line; do
    __logger_core "trace" "$(printf "%s %s" "${1:-UNKNOWN}" "$line")"
  done

}

function log_property() {
  # Args (4)
  # Arg 1 : Property name
  # Arg 2 : Property value
  # Arg 3 : log level can be 0-debug(default)
  #                          1-info
  #                          2-notice
  #                          3-dev
  #                          4-warning
  #                          5-error
  #                          other defaults to debug.
  # Arg 4 : Format string  spacing (default=18)
  local desc value fmt lvl
  local __msg_string
  desc="${1}"
  value="${2}"
  lvl="${3:-0}"
  fmt="%-${4:-22}s"
  __msg_string="$(printf "${fmt} : %s" "${desc}" "${value}")"

  case ${lvl} in
  0) __logger_core "debug" "${__msg_string}" ;;
  1) __logger_core "info" "${__msg_string}" ;;
  2) __logger_core "notice" "${__msg_string}" ;;
  3) __logger_core "dev" "${__msg_string}" ;;
  4) __logger_core "warn" "${__msg_string}" ;;
  5) __logger_core "error" "${__msg_string}" ;;
  *) __logger_core "debug" "${__msg_string}" ;;
  esac
}

function __setup_platform_vars() {
  # Function defines Script variables
  # Necessary variables used by the script are initialized here. This function
  # should be called first before choices are made, always.
  declare -r OS_RELEASE_FILE="/etc/os-release"

  if [[ -r "${OS_RELEASE_FILE}" ]]; then
    log_debug "Found os-release file ${OS_RELEASE_FILE}"
    # Read Version Code Name
    readonly AE_DISTRO_CODENAME="$(awk '/VERSION_CODENAME=/' "${OS_RELEASE_FILE}" | sed 's/VERSION_CODENAME=//' | tr '[:upper:]' '[:lower:]')"

    # Read Human Readable Full Version Name
    readonly AE_DISTRO_PRETTY_NAME="$(awk '/PRETTY_NAME=/' "${OS_RELEASE_FILE}" | sed 's/PRETTY_NAME=//' | tr -d '"')"

    # Read Human Readable Distro Name
    readonly AE_DISTRO_NAME="$(awk '/^NAME=/' "${OS_RELEASE_FILE}" | sed 's/^NAME=//' | tr -d '"')"
  else
    log_and_exit "Script cannot determine distro/codename!" "5"
  fi

  declare -r architecture="$(uname -m)"
  case "${architecture}" in
  x86_64)
    log_debug "Architecture is 64 bit."
    readonly AE_ARCH="amd64"
    ;;
  armv7* | armv8*)
    log_debug "Running on ARM CPU with HW Floating point Processor"
    readonly AE_ARCH="armhf"
    ;;
  aarch64 | arm64)
    log_debug "This is an ARM64. Please be advised that not all repositories support this arch."
    readonly AE_ARCH="arm64"
    ;;
  *)
    log_and_exit "Unsupported Architecture. ${architecture}" "11"
    ;;
  esac

  readonly AE_APT_KEYRINGS_DIR=/usr/share/keyrings

  # etc sources list dir
  readonly AE_APT_SOURCES_DIR=/etc/apt/sources.list.d

  #-------------------------- Release codenames --------------------------------------
  readonly AE_UBUNTU_CODENAME_LATEST="mantic"

  # 404 is a placeholder which is  set when there are
  # no suitable releases which can use this feature or
  # the release is unknown or too early in developement.
  readonly AE_UBUNTU_CODENAME_UPCOMING="noble"

  readonly AE_UBUNTU_CODENAME_LATEST_LTS="jammy"

  readonly AE_DEBIAN_CODENAME_LATEST="bookworm"
  readonly AE_DEBIAN_CODENAME_UPCOMING="trixie"

  #============================ Switches/ booleans & Vars ================================

  # Allow repo fixes for Upcoming releases of ubuntu and its derivatives.
  AE_RUN_FIX_UPCOMING="false"

  # By default version checks are enabled
  AE_RUN_VERSION_CHECK="true"

  # Not used
  # readonly AE_DEPRECATED_VERSION_URL="https://ae.prasadt.com/get/v3/version"

  # Purge not required packages
  # Default is false
  # Requires command line option -d to be passed via command line otherwise it will not work.
  # Set this to true if you don't want to pass -d every time
  AE_RUN_CONFIG_FLAG_PURGE="false"

  # Keep Downloaded DEB packages
  AE_RUN_CONFIG_FLAG_PRESERVE_PKGS="false"

  #
  # ================================================================================== #
  # Achtung!
  # Do not change any of the variables below this if you don't know what they do.
  # They are essential for correct working of the script.

  # Check Debian Flags
  AE_RUN_IS_DEBIAN="false"

  # Boolean to hold if --pre-release was applied
  AE_RUN_FIX_ACTIVE="false"

}

function delete_log_file() {
  printf "➜ Deleting log file\n"
  if rm "${AE_RUN_BASE_DIR}/logs/after-effects.log"; then
    printf "${AE_COLOR_GREEN}• Done${AE_COLOR_NC}\n"
    exit 0
  else
    printf "${AE_COLOR_RED}• Failed!${AE_COLOR_NC}\n"
    exit 1
  fi
}

# Checks if command is available
function has_command() {
  if command -v "$1" >/dev/null; then
    return 0
  else
    return 1
  fi
  return 1
}

function __print_runtime_info() {
  # This function logs and displays the Necessary details which helps in debugging.
  if has_command hostname; then
    log_property "Hostname" "$(hostname)" 1
  else
    log_property "Hostname" "UNKNOWN"
  fi
  log_property "OS" "${AE_DISTRO_PRETTY_NAME}" 1
  log_property "Distribution" "${AE_DISTRO_NAME}" 1
  log_property "Release" "${AE_DISTRO_CODENAME}" 1
  log_property "Architecture" "${AE_ARCH}" 1
  log_property "Version" "${AE_VERSION}" 1

  log_property "AE_APT_SOURCES_DIR" "${AE_APT_SOURCES_DIR}"
  log_property "AE_APT_KEYRINGS_DIR" "${AE_APT_KEYRINGS_DIR}"
  log_property "AE_RUN_BASE_DIR" "${AE_RUN_BASE_DIR}"
  log_property "AE_LOG_FILE" "${AE_LOG_FILE}"
}

function _check_dependencies() {
  #Checks if commands in array are available.
  # Accepts one argument as array.
  local dependencies=("$@")
  local dependency_check_failed_count dependency
  dependency_check_failed_count=0
  for dependency in "${dependencies[@]}"; do
    if has_command "$dependency" >/dev/null; then
      log_property "${dependency}" "INSTALLED"
    else
      log_property "$dependency" "MISSING"
      dependency_check_failed_count=$((dependency_check_failed_count + 1))
    fi
  done

  if [ "$dependency_check_failed_count" -gt 0 ]; then
    return 1
  else
    return 0
  fi
}

function _eol_message() {
  # Display EOL Message and upgrade instruction URLs.
  # Arguments: 1
  # ARG 1: EOL Date
  log_and_exit "${AE_DISTRO_PRETTY_NAME} is no longer supported. ($1)." "12"
}

function _usup_message() {
  log_and_exit "${AE_DISTRO_PRETTY_NAME} is not supported by the script." "12"
}

function _fix_ubuntu_derivatives() {
  # Some Ubuntu based distributions use their own codename (Linux mint, Elementary)
  # Some repositories require that ubuntu codename is used.
  # This function fixes that for
  # Linux Mint 20.x : Ubuntu 20.04 Xenial,
  # Linux Mint 19.x : Ubuntu 18.04 Xenial,
  # Elementary OS Juno,Hera: Ubuntu 18.04 Xenial
  # Pop!_OS uses Ubuntu codenames (No need to apply fix)
  # KDE Neon, Bodhi, Peppermint use Ubuntu codenames
  # If the release is not known this function exits the script for safety.

  log_stage "Checking for Ubuntu derivates/Debian"
  log_var "AE_DISTRO_CODENAME"

  declare -g AE_RUN_CODENAME="$AE_DISTRO_CODENAME"
  log_var "AE_RUN_CODENAME"

  case ${AE_RUN_CODENAME} in
  noble)
    readonly AE_RUN_DISTRO_NAME="ubuntu"
    log_warn "Release is Ubuntu 24.04 Noble Numbat"
    ;;
  # Ubuntu 23.10 and its derivatives
  mantic)
    readonly AE_RUN_DISTRO_NAME="ubuntu"
    log_warn "Release is Ubuntu 23.14 Mantic Minotaur"
    ;;
  # Ubuntu 23.04 and its derivatives
  lunar)
    readonly AE_RUN_DISTRO_NAME="ubuntu"
    log_info "Release is Ubuntu 23.04 Lunar Lobster"
    ;;
  # Ubuntu 22.04 and its derivatives
  jammy)
    readonly AE_RUN_DISTRO_NAME="ubuntu"
    log_info "Release is Ubuntu 22.04 LTS Jammy Jellyfish"
    ;;
  venessa | vera | victoria)
    log_info "This is Linux-Mint 21.X."
    log_info "Setting additional repositories to follow Ubuntu 22.04."
    AE_RUN_CODENAME="jammy"
    readonly AE_RUN_DISTRO_NAME="ubuntu"
    log_success "Changed codename to $AE_RUN_CODENAME"
    ;;
  # Ubuntu 20.04 and its derivatives
  focal)
    readonly AE_RUN_DISTRO_NAME="ubuntu"
    log_info "This is latest LTS release of Ubuntu"
    log_success "Keeping the codename as $AE_RUN_CODENAME."
    ;;
  ulyana | ulyssa | uma | una)
    log_info "Release is Linux Mint 20.X."
    log_info "Setting additional repositories to follow Ubuntu 20.04."
    AE_RUN_CODENAME="focal"
    readonly AE_RUN_DISTRO_NAME="ubuntu"
    readonly AE_RUN_SNAP_REMOVE_APT_BLOCK="true"
    log_success "Changed codename to $AE_RUN_CODENAME"
    ;;
  odin)
    log_info "Release is elementaryOS 6 - Odin."
    log_info "Setting additional repositories to follow Ubuntu 20.04."
    AE_RUN_CODENAME="focal"
    readonly AE_RUN_DISTRO_NAME="ubuntu"
    log_success "Changed codename to $AE_RUN_CODENAME"
    ;;
  jolnir)
    log_info "Release is elementaryOS 6.1 - Jólnir."
    log_info "Setting additional repositories to follow Ubuntu 20.04."
    AE_RUN_CODENAME="focal"
    readonly AE_RUN_DISTRO_NAME="ubuntu"
    log_success "Changed codename to $AE_RUN_CODENAME"
    ;;
  horus)
    log_info "Release is elementaryOS 7 - Horus."
    log_info "Setting additional repositories to follow Ubuntu 22.04."
    AE_RUN_CODENAME="jammy"
    readonly AE_RUN_DISTRO_NAME="ubuntu"
    log_success "Changed codename to $AE_RUN_CODENAME"
    ;;
  bullseye)
    AE_RUN_IS_DEBIAN="true"
    readonly AE_RUN_DISTRO_NAME="debian"
    log_notice "This is Debian 11 Bullseye. PPAs are disabled."
    ;;
  bookworm)
    AE_RUN_IS_DEBIAN="true"
    readonly AE_RUN_DISTRO_NAME="debian"
    log_notice "This is Debian 12 Bookworm. PPAs are disabled."
    ;;
  trixie)
    AE_RUN_IS_DEBIAN="true"
    readonly AE_RUN_DISTRO_NAME="debian"
    log_dev "You are running Debian Testing!"
    log_notice "This is Debian Trixie. PPAs are disabled."
    ;;
  # Unsupported releases
  kinetic) _usup_message ;;
  buster) _usup_message ;;
  stretch) _eol_message "June 30, 2022" ;;
  bionic) _eol_message "April 2023" ;;
  tara | tessa | tina | tricia) _eol_message "April 2023" ;;
  juno | hera) _eol_message "April 2023" ;;
  *)
    log_and_exit "Unknown or unsupported release($AE_RUN_CODENAME) !" "16"
    ;;
  esac

  log_success "Applied release specific settings and fixes."
  log_var "AE_RUN_CODENAME"

  # Save a copy of AE_RUN_CODENAME
  # shellcheck disable=SC2034
  declare -gr AE_BASE_CODENAME="${AE_RUN_CODENAME}"
  log_var "AE_BASE_CODENAME"
  log_var "AE_RUN_IS_DEBIAN"
}

function __not_connected_to_internet() {
  log_error "You are not connected to the Internet!. "
  log_error "Please check your Internet connection and try again."
  log_and_exit "No internet connection!" "14"
}

function __test_internet() {
  # Function to check internet connection
  log_info "Checking connectivity"
  if has_command wget; then
    if wget -q -O /dev/null http://www.gstatic.com/generate_204 2>&1 | log_trace "${AE_LOG_PHASE_CORE}"; then
      log_success "Connected!"
    else
      __not_connected_to_internet
    fi
  elif has_command curl; then
    if curl -sSfL -o /dev/null http://www.gstatic.com/generate_204 2>&1 | log_trace "${AE_LOG_PHASE_CORE}"; then
      log_success "Connected!"
    else
      __not_connected_to_internet
    fi
  else
    log_and_exit "No wget or curl command found!" "15"
  fi
}

function _test_conflicting_apps() {
  # Function checks if any apps like syanptic aptitude are running.
  local lock
  for lock in synaptic update-manager software-center apt-get dpkg aptitude; do
    # shellcheck disable=SC2009
    if ps -U root -u root u | grep $lock | grep -v grep >/dev/null; then
      log_and_exit "Installation won't work. Please close $lock first then try again." "15"
    else
      log_property "$lock" "not running"
    fi
  done
  log_success "No conflicts detected"
}

function parse_yaml() {
  local yaml_file="${1}"
  local prefix="${2}"
  local s
  local w
  local fs

  s='[[:space:]]*'
  w='[a-zA-Z0-9_.-]*'
  fs="$(echo @ | tr @ '\034')"

  (
    #shellcheck disable=SC1003
    sed -e '/- [^\"]'"[^\']"'.*: /s|\([ ]*\)- \([[:space:]]*\)|\1-\'$'\n''  \1\2|g' |
      sed -ne '/^--/s|--||g; s|\"|\\\"|g; s/[[:space:]]*$//g;' \
        -e "/#.*[\"\']/!s| #.*||g; /^#/s|#.*||g;" \
        -e "s|^\($s\)\($w\)$s:$s\"\(.*\)\"$s\$|\1$fs\2$fs\3|p" \
        -e "s|^\($s\)\($w\)${s}[:-]$s\(.*\)$s\$|\1$fs\2$fs\3|p" |
      awk -F"$fs" '{
          indent = length($1)/2;
          if (length($2) == 0) { conj[indent]="+";} else {conj[indent]="";}
          vname[indent] = $2;
          for (i in vname) {if (i > indent) {delete vname[i]}}
              if (length($3) > 0) {
                  vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("__")}
                  printf("%s%s%s%s=(\"%s\")\n", "'"$prefix"'",vn, $2, conj[indent-1],$3);
              }
          }' |
      sed -e 's/_=/+=/g' |
      awk 'BEGIN {
                FS="=";
                OFS="="
            }
            /(-|\.).*=/ {
                gsub("-|\\.", "_", $1)
            }
            { print }'
  ) <"$yaml_file"
}

function _get_remote_file() {
  # Function to get remote file/response
  # exits script if it fails.
  # Accepts 2 arguments.
  # ARG 1: File name; Name of the local file the response or file should be saved as.
  # ARG 2: URL to the  file

  local file_name="${1}"
  local exit_status
  local file_url="${2}"
  log_property "URL is set to" "${file_url}"

  if [[ $# -eq 2 ]]; then
    # Remote files
    if has_command wget; then
      log_debug "Fetch handler is wget"
      wget -q "${file_url}" -O "$file_name" 2>&1 | log_trace "${AE_LOG_PHASE_CORE}"
      exit_status="$?"
    elif has_command curl; then
      log_debug "Fetch handler is curl"
      curl -sSfL "${file_url}" --output "$file_name" 2>&1 | log_trace "${AE_LOG_PHASE_CORE}"
      exit_status="$?"
    else
      log_and_exit "No handlers available for fetching remote data!" "28"
    fi

    log_property "Exit code" "$exit_status"
    if [[ $exit_status -ne 0 ]]; then
      log_error "Something went wrong while retrieving ${file_name}."
      log_and_exit "Error Getting file." "28"
    fi
  else
    log_and_exit "Invalid number of arguments <_get_remote_file> Requires 2, got $#." "19"
  fi

}

function compare_versions() {
  # Function to compare two semver version strings.
  #
  # REQUIRED ARGUMENTS:
  # Accepts two arguments both of which are semver version strings.
  #
  # ARG1 - CURRENT_SEMVER. Usually obtained from
  #     a) Within the script
  #     b) Executing {binary} --version --short
  #     c) Version marker files from ~/bin or /usr/share/vmark-files/{binary}
  #     d) Package manager's metadata
  # ARG2 - UPSTREAM_SEMVER. Usually obtained from
  #     a) Upcheck API endpoint
  #     b) GitHub releases API
  # This function will NOT handle fetching/reading these values.
  #
  # DEPENDENCIES: One of the following is required.
  #     a) 'sh-logger' snippet from tprasadtp/templates repository.
  #     b) 'log_debug' function. Minimum dummy implementation is below.
  #        ```bash
  #        function log_debug(){}
  #        ```
  # LOGGING: All logs generated by this function are at debug level (handled by `log_debug`).

  # Compares CURRENT_SEMVER and UPSTREAM_SEMVER mostly according to semver specs and
  # Returns RESULTS:
  # If CURRENT_SEMVER > UPSTREAM_SEMVER  return value is  2. (no update required)
  # If CURRENT_SEMVER < UPSTREAM_SEMVER  return value is  1. (update is required)
  # If CURRENT_SEMVER == UPSTREAM_SEMVER return value is  0. (no update required)
  # ERRORS:
  #   a) 21    - CURRENT_SEMVER  is invalid
  #   b) 22    - UPSTREAM_SEMVER is invalid
  #   c) 10    - 'log_debug' function is not defined
  #   d) 30    - For some reason, evaluation isn't completed
  #   e) 40    - Unhadled condition.
  #
  # NOTES:
  # Please note that return values 21 and 22 indicates version is not compliant accoring
  # to our versioning policy. It might be a valid semver according to semver specs,
  # but is non compliant with our tagging policy, which follows
  # MAJOR.MINOR.PATCH-<PRERELEASE_IDENTIFIER>.<PRERELEASE_VERSION>
  # For pre releases, PRERELEASE_IDENTIFIER can be 'alpha', 'beta' or 'rc' with an
  # optional <PRERELEASE_VERSION> which MUST be a non negative integer.

  # Check if log_debug function is defined
  if ! declare -F "log_debug" >/dev/null; then
    return 10
  fi

  # Define semver regex according to policy tprasadtp/templates/semver-regex.md
  declare -r SEMVER_REGEX="^[vV]?(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)(\-(alpha|beta|rc)(\.(0|[1-9][0-9]*))?)?\$"

  local current_semver upstream_semver
  current_semver="$1"
  upstream_semver="$2"

  log_debug "Current  version : ${current_semver}"
  log_debug "Upstream version : ${upstream_semver}"

  local current_major current_minor current_patch current_pre current_pre_num
  local upstream_major upstream_minor upstream_patch upstream_pre upstream_pre_num

  # Parse current semver
  if [[ $current_semver =~ $SEMVER_REGEX ]]; then
    current_major="${BASH_REMATCH[1]}"
    current_minor="${BASH_REMATCH[2]}"
    current_patch="${BASH_REMATCH[3]}"
    current_pre="${BASH_REMATCH[5]}"
    current_pre_num="${BASH_REMATCH[7]}"
    log_debug "Parsed version (current)  -> major:${current_major} minor:${current_minor} patch:${current_patch} pre:${current_pre} prenum:${current_pre_num}"
  else
    return 21
  fi

  # Parse upstream semver.
  if [[ ${upstream_semver} =~ $SEMVER_REGEX ]]; then
    upstream_major="${BASH_REMATCH[1]}"
    upstream_minor="${BASH_REMATCH[2]}"
    upstream_patch="${BASH_REMATCH[3]}"
    upstream_pre="${BASH_REMATCH[5]}"
    upstream_pre_num="${BASH_REMATCH[7]}"
    log_debug "Parsed version (upstream) -> major:${upstream_major} minor:${upstream_minor} patch:${upstream_patch} pre:${upstream_pre} prenum:${upstream_pre_num}"
  else
    return 22
  fi

  # Compare semver versions
  # Major version
  if [[ ${upstream_major} -gt ${current_major} ]]; then
    log_debug "Upstream release is newer than current ${upstream_major} > ${current_major} (major)"
    return 1
  elif [[ ${upstream_major} -lt ${current_major} ]]; then
    log_debug "Current version is newer than upstream available ${upstream_major} < ${current_major} (major)"
    return 2
  fi

  # Minor version
  # This will only be executed if MAJOR versions match.
  if [[ ${upstream_minor} -gt ${current_minor} ]]; then
    log_debug "Upstream release is newer than current ${upstream_minor} > ${current_minor} (minor)"
    return 1
  elif [[ ${upstream_minor} -lt ${current_minor} ]]; then
    log_debug "Current version is newer than upstream available ${upstream_minor} < ${current_minor} (minor)"
    return 2
  fi

  # Patch version
  # This will only be executed if MAJOR AND MINOR versions match.
  if [[ ${upstream_patch} -gt ${current_patch} ]]; then
    log_debug "Upstream release is newer than current ${upstream_patch} > ${current_patch} (patch)"
    return 1
  elif [[ ${upstream_patch} -lt ${current_patch} ]]; then
    log_debug "Current version is newer than upstream available ${upstream_patch} < ${current_patch} (patch)"
    return 2
  fi

  # What follows below is the mess of somewhat following semver specs.
  log_debug "Major, Minor and Patch version match."

  # Check if pre release strings are present in one of the versions. whichever lacks pre release string
  # is the upstream one. For Eg. 2.3.6-beta.1 < 2.3.6

  # upstream version has NO pre release fields but current one DOES
  # current: 2.2.2-rc.1 upstream: 2.2.2, then upstream is newer.
  if [[ -z ${upstream_pre} ]] && [[ -n $current_pre ]]; then
    log_debug "Upstream version has no pre release fields, it is newer!"
    return 1
  # upstream version HAS prerelease fields but current one DOES NOT
  # current: 2.2.2 upstream: 2.2.2-rc.1, then current is newer.
  elif [[ -n ${upstream_pre} ]] && [[ -z $current_pre ]]; then
    log_debug "Current version has no pre release fields, it is newer!"
    return 2
  fi

  # We do not follow complete semver specs.
  # This is done for simplicity. All our versioning policies only include
  # pre release tags of format MAJOR.MINOR.PATCH-<PRERELEASE_IDENTIFIER>.<PRERELEASE_VERSION>
  # In our policies its strictly forbidden to include build numbers and build identifiers in
  # the tags created. We only embed build number information in
  # execultables themeselves or as packaging metadata like docker labels.
  # In case of pre release versions, we only have <PRERELEASE_IDENTIFIER>.<PRERELEASE_VERSION>
  # or <PRERELEASE_IDENTIFIER>. Thus, all other cases are ignored.

  # Check if pre release identifiers match.
  # Spec 11.4.2
  # Identifiers with letters or hyphens are compared lexically in ASCII sort order.
  if [[ $upstream_pre > $current_pre ]]; then
    log_debug "Upstream pre release identider is lexographically greater than current one.(prerelease)"
    return 1
  elif [[ $upstream_pre < $current_pre ]]; then
    log_debug "Current pre release identider is lexographically greater than upstream one.(prerelease)"
    return 2
  else
    log_debug "Current and upstream pre release identifiers match"
  fi

  # Spec 11.4.4: A larger set of pre-release fields has a higher precedence than a smaller set,
  #              if all of the preceding identifiers are equal.
  # check if both PRERELEASE_VERSION fields are empty, if so both versions are equal.
  if [[ -z $upstream_pre_num ]] && [[ -z $current_pre_num ]]; then
    log_debug "pre-release version identifiers are empty for both fields. (all)"
    return 0
  fi

  # upstream version has pre release version field but current one doesnt
  # current: 2.2.2-rc upstream: 2.2.2.rc.1, then upstream is newer.
  if [[ -z ${upstream_pre_num} ]] && [[ -n $current_pre_num ]]; then
    log_debug "Upstream has pre release number but current one does not. Upstream is newer (prerelease-num)"
    return 1
  # upstream version has lacks pre release version field but current one does
  # current: 2.2.2-rc.1 upstream: 2.2.2.rc, then current is newer.
  elif [[ -n ${upstream_pre_num} ]] && [[ -z $upstream_pre_num ]]; then
    log_debug "Current version pre release number but current one does not. Current version is newer. (prerelease-num)"
    return 2
  fi

  if [[ ${upstream_pre_num} -gt ${current_pre_num} ]]; then
    log_debug "Upstream release is newer than current ${upstream_pre_num} > ${current_pre_num} (prerelease-num)"
    return 1
  elif [[ ${upstream_pre_num} -lt ${current_pre_num} ]]; then
    log_debug "Current version is newer than upstream available ${upstream_pre_num} < ${current_pre_num} (prerelease-num)"
    return 2
  elif [[ ${upstream_pre_num} -eq ${current_pre_num} ]]; then
    log_debug "Current and upstream pre release nums match. ${upstream_pre_num} = ${current_pre_num} (all)"
    return 0
  fi

  # We should never reach this condition. If we do, indicate we did not handle all conditions.
  # This should trigger a bug report prompt/message in logs.
  return 40
}

function _version_checks() {
  # Checks if its running latest version.
  # Also suggest updating to latest version if current version is not latest,
  # Allows to deprecate old version as it can be suggested.
  # Check if Version Checks is enabled. (Default is enabled)
  declare upcheck_gh_api_res latest_semver_tag vcompare_result

  # Check if update checks are enabled (default=true)
  if [ "$AE_RUN_VERSION_CHECK" == "true" ]; then
    log_stage "Checking for updates"

    # Get latest version from GitHub release endpoint
    latest_semver_tag="$(wget -q --timeout 20 --tries 3 -O- https://api.github.com/repos/tprasadtp/ubuntu-post-install/releases/latest | grep -Po '"tag_name": "\K.*?(?=")')"
    upcheck_gh_api_res="$?"
    if [[ $upcheck_gh_api_res -ne 0 ]]; then
      log_error "Failed to check for updates!"
      log_and_exit "Either check your connectivity or disable version checks with --no-version-check" "31"
    fi

    # Remove leading v if necessary
    latest_semver="${latest_semver_tag#v}"
    log_info "Latest available version is ${latest_semver}"

    # Compare versions <CURRR> <UPSTREAM>
    log_debug "Comparing versions"

    compare_versions "${AE_VERSION}" "${latest_semver}"
    vcompare_result="$?"

    # Evaluate
    case $vcompare_result in
    1)
      log_error "Thou art running older version of this script,"
      log_error "Please download latest version and try again."
      log_and_exit "You can disable version checks by passing --no-version-check" "24"
      ;;
    0)
      log_success "Running the latest version!"
      ;;
    2)
      log_dev "You are running development version of the script"
      ;;
    21)
      log_warn "Script's semver is invalid! Please report this bug!"
      log_warn "Disabling update checks!"
      ;;
    22)
      log_warn "Latest version is invalid! Please report this bug!"
      ;;
    *)
      log_error "Failed to evaluate version check result- ${vcompare_result}"
      ;;
    esac

  # If version checks have been disabled
  else
    log_warn "Version checks have been disabled."
  fi

}

function _check_bool() {
  # Function to check if config has valid values for bool.
  # Accepted values are true and false
  # If invalid, defaults to false.
  # Accepts global var and bool to check as arguments
  local g_var param_bool default_val
  if [[ $# -eq 2 ]]; then
    default_val="false"
  else
    log_and_exit "Internal error! bool validator takes only two arguments!" "19"
  fi

  g_var="${1}"
  param_bool="${2}"
  case "${param_bool}" in
  true | True | TRUE | Yes | yes | YES | 1) # shellcheck disable=SC2086
    declare -g ${g_var}="true"
    log_var "$g_var"
    ;;
  false | False | FALSE | No | no | NO | 0) # shellcheck disable=SC2086
    declare -g ${g_var}="false"
    log_var "$g_var"
    ;;
  *) # shellcheck disable=SC2086
    declare -g ${g_var}="${default_val}"
    log_var "$g_var"
    ;;
  esac
}

function _set_yaml_config() {
  local config_yaml_file
  # Get and parse the file
  log_stage "Processing configuration"
  if [ "$AE_RUN_LOCAL_CONFIG" != "true" ]; then
    log_property "Config URL" "${AE_REMOTE_CONFIG_URL}" 3
    config_yaml_file="${AE_RUN_TMP_DIR}/api-config.yml"
    # Get response/file
    _get_remote_file "$config_yaml_file" "$AE_REMOTE_CONFIG_URL"
  else
    log_property "Config file" "$AE_CONFIG_FILE" 2
    config_yaml_file="$AE_CONFIG_FILE"
  fi

  # Parse YAML to variables
  log_property "Parsing config" "$config_yaml_file" 2
  eval "$(parse_yaml "$config_yaml_file" "AE_RUN__")"

  # error count
  declare AE_RUN_CFG_BUILD_ERRORS=0

  declare -gr AE_RUN_CONFIG_API="${AE_RUN__api[0]}"
  log_var "AE_RUN_CONFIG_API"

  log_info "Validating Config Version"
  if [[ $AE_RUN_CONFIG_API -eq 3 ]]; then
    log_debug "[v3] OK"
  else
    log_error "[v3] Missing or incorrect config API version identifier."
    log_error "[v3] Suggeted Action: Please include api:  in your config file."
    AE_RUN_CFG_BUILD_ERRORS=$((AE_RUN_CFG_BUILD_ERRORS + 1))
  fi

  # Repo flags
  #################################################################################

  declare -r debian_packages_deprecation_chck="${!AE_RUN__config__install__debian_packages*}"
  if [[ -n ${debian_packages_deprecation_chck} ]]; then
    log_error "[v3] config.install.debian_packages[] is obsolete, use config.install.debs[]"
    AE_RUN_CFG_BUILD_ERRORS=$((AE_RUN_CFG_BUILD_ERRORS + 1))
  fi

  declare -r tasks_repos_deprecation_chck="${!AE_RUN__config__tasks__repo*}"
  if [[ -n ${tasks_repos_deprecation_chck} ]]; then
    log_error "[v3] config.tasks.repo is obsolete, use config.tasks.add_repo"
    AE_RUN_CFG_BUILD_ERRORS=$((AE_RUN_CFG_BUILD_ERRORS + 1))
  fi

  _check_bool "AE_RUN_CONFIG_REPO_DOCKER" "${AE_RUN__config__add_repo__docker[0]}"

  _check_bool "AE_RUN_CONFIG_REPO_WINEHQ" "${AE_RUN__config__add_repo__winehq[0]}"

  _check_bool "AE_RUN_CONFIG_REPO_MENDELEY" "${AE_RUN__config__add_repo__mendeley[0]}"

  _check_bool "AE_RUN_CONFIG_REPO_SPOTIFY" "${AE_RUN__config__add_repo__spotify[0]}"

  _check_bool "AE_RUN_CONFIG_REPO_SIGNAL" "${AE_RUN__config__add_repo__signal[0]}"

  _check_bool "AE_RUN_CONFIG_REPO_SUBLIMETEXT" "${AE_RUN__config__add_repo__sublimetext[0]}"

  _check_bool "AE_RUN_CONFIG_REPO_PODMAN" "${AE_RUN__config__add_repo__podman[0]}"

  # ROS
  _check_bool "AE_RUN_CONFIG_REPO_ROS" "${AE_RUN__config__add_repo__ros[0]}"
  _check_bool "AE_RUN_CONFIG_REPO_ROS2" "${AE_RUN__config__add_repo__ros2[0]}"

  # GitHub
  _check_bool "AE_RUN_CONFIG_REPO_GH" "${AE_RUN__config__add_repo__github[0]}"

  _check_bool "AE_RUN_CONFIG_REPO_HASHICORP" "${AE_RUN__config__add_repo__hashicorp[0]}"

  # Google
  _check_bool "AE_RUN_CONFIG_REPO_GVISOR" "${AE_RUN__config__add_repo__gvisor[0]}"
  _check_bool "AE_RUN_CONFIG_REPO_BAZEL" "${AE_RUN__config__add_repo__bazel[0]}"
  _check_bool "AE_RUN_CONFIG_REPO_GCP" "${AE_RUN__config__add_repo__googlecloud[0]}"
  _check_bool "AE_RUN_CONFIG_REPO_GCSFUSE" "${AE_RUN__config__add_repo__gcsfuse[0]}"
  _check_bool "AE_RUN_CONFIG_REPO_CHROME" "${AE_RUN__config__add_repo__chrome[0]}"

  # Microsoft
  _check_bool "AE_RUN_CONFIG_REPO_AZURECLI" "${AE_RUN__config__add_repo__azurecli[0]}"
  _check_bool "AE_RUN_CONFIG_REPO_EDGE" "${AE_RUN__config__add_repo__edge[0]}"
  _check_bool "AE_RUN_CONFIG_REPO_SKYPE" "${AE_RUN__config__add_repo__skype[0]}"
  _check_bool "AE_RUN_CONFIG_REPO_VSCODE" "${AE_RUN__config__add_repo__vscode[0]}"
  _check_bool "AE_RUN_CONFIG_REPO_BRAVE_BROWSER" "${AE_RUN__config__add_repo__brave_browser[0]}"
  _check_bool "AE_RUN_CONFIG_REPO_SLACK" "${AE_RUN__config__add_repo__slack[0]}"
  _check_bool "AE_RUN_CONFIG_REPO_VIVALDI" "${AE_RUN__config__add_repo__vivaldi[0]}"
  _check_bool "AE_RUN_CONFIG_REPO_PROTONVPN" "${AE_RUN__config__add_repo__protonvpn[0]}"
  _check_bool "AE_RUN_CONFIG_REPO_NEURODEBIAN" "${AE_RUN__config__add_repo__neurodebian[0]}"
  _check_bool "AE_RUN_CONFIG_REPO_MINICONDA" "${AE_RUN__config__add_repo__miniconda[0]}"
  _check_bool "AE_RUN_CONFIG_REPO_ELEMENT_IO" "${AE_RUN__config__add_repo__element_io[0]}"

  # Debian Components
  _check_bool "AE_RUN_CONFIG_REPO_DEBIAN_NONFREE" "${AE_RUN__config__add_repo__debian_nonfree[0]}"
  _check_bool "AE_RUN_CONFIG_REPO_DEBIAN_CONTRIB" "${AE_RUN__config__add_repo__debian_contrib[0]}"

  # Ubuntu Components
  case "$AE_RUN_CONFIG_REPO_ROS2" in
  true | True | TRUE | Yes | yes | YES | 1) # shellcheck disable=SC2086
    log_warn "Forcing AE_RUN_CONFIG_REPO_UBUNTU_UNIVERSE=true because of ROS2"
    _check_bool "AE_RUN_CONFIG_REPO_UBUNTU_UNIVERSE" "true"
    ;;
  false | False | FALSE | No | no | NO | 0) # shellcheck disable=SC2086
    log_warn "Ignoring AE_RUN_CONFIG_REPO_UBUNTU_UNIVERSE=false because of ROS2"
    _check_bool "AE_RUN_CONFIG_REPO_UBUNTU_UNIVERSE" "true"
    ;;
  esac
  _check_bool "AE_RUN_CONFIG_REPO_UBUNTU_MULTIVERSE" "${AE_RUN__config__add_repo__ubuntu_multiverse[0]}"
  _check_bool "AE_RUN_CONFIG_REPO_UBUNTU_RESTRICTED" "${AE_RUN__config__add_repo__ubuntu_restricted[0]}"

  # Other Script Flags
  #################################################################################

  # Purge Packages
  if [[ $AE_RUN_CONFIG_FLAG_PURGE == "true" ]]; then
    log_debug "Ignoring config.flags.purge_enabled because of cli flag"
  else
    _check_bool "AE_RUN_CONFIG_FLAG_PURGE" "${AE_RUN__config__flags__purge_enabled[0]}"
  fi

  # Keep pkgs

  if [[ $AE_RUN_CONFIG_FLAG_PRESERVE_PKGS == "true" ]]; then
    log_debug "Ignoring config.flags.preserve_debs because of cli flag"
  else
    _check_bool "AE_RUN_CONFIG_FLAG_PRESERVE_PKGS" "${AE_RUN__config__flags__preserve_debs[0]}"
  fi

  # Uni-Mirror
  _check_bool "AE_RUN_CONFIG_FLAG_UF_MIRROR" "${AE_RUN__config__flags__uni_freiburg_mirror[0]}"

  # Tasks Flags
  ##################################################################################

  _check_bool "AE_RUN_CONFIG_TASK_UPDATE" "${AE_RUN__config__tasks__update[0]}"

  _check_bool "AE_RUN_CONFIG_TASK_UPGRADE" "${AE_RUN__config__tasks__upgrade[0]}"

  _check_bool "AE_RUN_CONFIG_TASK_REPO" "${AE_RUN__config__tasks__add_repo[0]}"

  _check_bool "AE_RUN_CONFIG_TASK_PPA" "${AE_RUN__config__tasks__ppa[0]}"

  # Migrate APT to PKGS
  _check_bool "AE_RUN_CONFIG_TASK_APT" "${AE_RUN__config__tasks__apt[0]}"

  _check_bool "AE_RUN_CONFIG_TASK_DEBS" "${AE_RUN__config__tasks__debs[0]}"

  _check_bool "AE_RUN_CONFIG_TASK_PURGE" "${AE_RUN__config__tasks__purge[0]}"

  _check_bool "AE_RUN_CONFIG_TASK_BIN" "${AE_RUN__config__tasks__binaries[0]}"

  _check_bool "AE_RUN_CONFIG_TASK_SNAPS" "${AE_RUN__config__tasks__snaps[0]}"

  #################################################################################
  #                              Parse Arrays
  #################################################################################
  # Config file YAML has arrays of packages.

  #--------------------------------------------------------------------------------
  #                               PKG Lists
  #--------------------------------------------------------------------------------
  # There are Seven lists under key config.install.apt|pkgs.[mentioned from 1-7]
  # 1. administration : Contains Administrative packages
  # 2. security       : contains Security related tools and packages
  # 3. productivity   : Office tools, writing tools, LateX, document tools and other
  #                     productivity tools, Email clients, browsers, IM clients etc.
  #                   : Example : LateX, TeXStudio, Libre office, pandoc empathy, Thunderbird
  # 4. Multimedia     : Multimedia tools like media players, audio converters and playes etc.
  # 5. development    : IDEs [Spyder, Jetbeans etc], languages [go, python, ruby, rust, java etc],
  #                   : Containers [docker lxc rkt etc], Python libraries, compilers [gcc, clang]
  #                   : SDKs [AWS SDK, Coogle Cloud SDK, open-jdk, Tensor Flow], headers
  #                   : and libraries[ocl-icd-dev],
  #                   : Anything related to development and *-dev or *-devl packages.
  # 6. other          : Everything which doesnot fit in the above categories.
  #                   : Themes, Tools, Utilities like htop etc.
  # 7. External       : Any packages which are provided by ppas, or repositories not present in
  #                   : base *buntu distribution. There's a possibility that the repository might not
  #                   : be added or may be unavailable or offline. So Keeping the list seperate from
  #                   : others packages minimizes errors if there are any.
  # This classification is only for ease of use and need not be strictly followed. You can put
  # vlc package in 'security', it will still install fine. This classification helps
  # while writing configs and editing them. Its advised to follow it if your configs
  # tend to get to couple of hundreds of lines. Also YAML file should be a valid YAML.

  #--------------------------------------------------------------------------------
  #                             Special list - Purge list
  #--------------------------------------------------------------------------------
  # There is a special package list under key, config.purge, which contains
  # list of packages to be purged from the system if present.
  # Lets get em, shall we?

  # Purge
  declare -gar AE_RUN_PARSED_PURGE_PKGS=("${AE_RUN__config__purge_[@]}")

  declare -gar AE_RUN_PARSED_ADMINISTRATION_PKGS=("${AE_RUN__config__install__apt__administration_[@]}")
  declare -gar AE_RUN_PARSED_SECURITY_PKGS=("${AE_RUN__config__install__apt__security_[@]}")
  declare -gar AE_RUN_PARSED_PRODUCTIVITY_PKGS=("${AE_RUN__config__install__apt__productivity_[@]}")
  declare -gar AE_RUN_PARSED_MULTIMEDIA_PKGS=("${AE_RUN__config__install__apt__multimedia_[@]}")
  declare -gar AE_RUN_PARSED_DEV_PKGS=("${AE_RUN__config__install__apt__development_[@]}")
  declare -gar AE_RUN_PARSED_OTHER_PKGS=("${AE_RUN__config__install__apt__other_[@]}")
  declare -gar AE_RUN_PARSED_EXTERNAL_PKGS=("${AE_RUN__config__install__apt__external_[@]}")

  #--------------------------------------------------------------------------------
  #                             PPA Lists
  #--------------------------------------------------------------------------------
  # Config file contains list of PPAs to be added under key
  # config.ppa
  declare -gar AE_RUN_PARSED_PPA=("${AE_RUN__config__ppa_[@]}")

  #--------------------------------------------------------------------------------
  #                             Debian packages
  #--------------------------------------------------------------------------------
  # Config file contains list of DEB packages to be downloaded & installed under key
  # config.install.debs
  declare -gar AE_RUN_PARSED_DEBFILES=("${AE_RUN__config__install__debs_[@]}")

  #--------------------------------------------------------------------------------
  #                             Static binaries
  #--------------------------------------------------------------------------------
  declare -gar AE_RUN_PARSED_BINS=("${AE_RUN__config__install__binaries_[@]}")

  #--------------------------------------------------------------------------------
  #                             Snap Packages
  #--------------------------------------------------------------------------------
  declare -gar AE_RUN_PARSED_SNAPS=("${AE_RUN__config__install__snaps_[@]}")

  if [[ ${AE_RUN_CFG_BUILD_ERRORS} -eq 0 ]]; then
    log_debug "Parsed config w/o errors"
  else
    log_and_exit "Configuration error, Please fix your configuration and try again!" 71
  fi

}

function _clean_apt_cache() {
  # Function to clean apt package cache. Takes care of -k flag in all the installs.
  # Honor -k flag
  # Delete DEBs
  if [ "$AE_RUN_CONFIG_FLAG_PRESERVE_PKGS" != "true" ]; then
    log_debug "Removing cached APT packages"
    apt-get -q -o=Dpkg::Use-Pty=0 clean | log_trace "${AE_LOG_PHASE_APT}"
  else
    log_notice "Keeping cached packages because -k flag is set."
  fi

}

function _install_dependencies() {
  # Install packages mentioned in the arguments.
  # If installation fails exit the script.
  # ARG 1: Packages in quote separated by space.
  local packages=("$@")
  log_debug "Installing Packages ${packages[*]}"
  # Check if array is empty
  if [[ ${#packages[@]} -eq 0 ]]; then
    log_warn "Package array is empty!"
    return 19
  else
    apt-get -q -o=Dpkg::Use-Pty=0 -y --no-install-recommends install "${packages[@]}" 2>&1 | log_trace "${AE_LOG_PHASE_APT}"
    exit_status=$?
    if [ $exit_status -eq 0 ]; then
      log_success "Installed"
      _clean_apt_cache
      return 0
    else
      log_error "Failed to install dependencies: ${packages[*]}"
      log_error "Please see the log file for more details."
      return 21
    fi
  fi
}

function _install_pre_requisites() {
  # This function installs required packages for adding apt repositories
  # These should be present in your base Ubuntu install. If not present then, this function
  # will install them.
  # Following are the packages installed by this function:
  # linux-image-extra-<>, apt-transport-https, ca-certificates,
  # curl, software-properties-common
  local pre_requisite_packages=(apt-transport-https ca-certificates curl gnupg2)
  log_info "Installing necessary dependencies"
  if _install_dependencies "${pre_requisite_packages[@]}"; then
    log_debug "Installed dependencies"
  else
    log_and_exit "Dependency packages failed to install!" "21"
  fi

}

function _warn_about_fix_codename() {
  log_warn "Repositories from older Ubuntu release are being used."
  log_warn "You need to modify this in Software and Updates,\n"
  log_warn "when they become available for ${AE_UBUNTU_CODENAME_UPCOMING}${NC}\n"
}

function __fix_prerelease() {
  # If repository is not available for upcoming  release use older repos

  log_debug "Check and apply codename fixes (--pre-release)"
  # check for fix-pre-release flag
  if [ "$AE_RUN_FIX_UPCOMING" == "true" ]; then

    if [[ $AE_RUN_FIX_MODE_LTS == "true" ]] && [[ $AE_RUN_CODENAME == "${AE_UBUNTU_CODENAME_UPCOMING}" ]]; then
      log_warn "Using lastest Ubuntu LTS (${AE_UBUNTU_CODENAME_LATEST_LTS}) as fallback!"
      AE_RUN_CODENAME="${AE_UBUNTU_CODENAME_LATEST_LTS}"
      AE_RUN_FIX_ACTIVE="true"

    elif [[ $AE_RUN_FIX_MODE_LTS != "true" ]] && [[ $AE_RUN_CODENAME == "${AE_UBUNTU_CODENAME_UPCOMING}" ]]; then
      log_warn "Using lastest Ubuntu (${AE_UBUNTU_CODENAME_LATEST}) as fallback!"
      AE_RUN_CODENAME="${AE_UBUNTU_CODENAME_LATEST}"
      AE_RUN_FIX_ACTIVE="true"

    elif [[ $AE_RUN_CODENAME == "$AE_DEBIAN_CODENAME_UPCOMING" ]]; then
      log_warn "Using lastest Debian Stable (${AE_DEBIAN_CODENAME_LATEST}) as fallback!"

      AE_RUN_CODENAME="${AE_DEBIAN_CODENAME_LATEST}"
      AE_RUN_FIX_ACTIVE="true"

    else
      log_warn "Not applicable."
      AE_RUN_FIX_ACTIVE="false"
    fi # check codenames

  else
    log_debug "Feature --pre-release is disabled."
    AE_RUN_FIX_ACTIVE="false"
  fi
}

function _map_to_obs_repos() {
  # This function maps AE_RUN_CODENAME to OBS repos
  # This MUST be called AFTER code name fixes are applied.
  # but BEFORE adding any OBS repos
  log_debug "Mapping AE_RUN_CODENAME to OBS prefix"

  # AE_RUN_OBS_PREFIX check
  if [[ -v ${AE_RUN_OBS_PREFIX} ]]; then
    log_and_exit "Reserved variable (AE_RUN_OBS_PREFIX) is set!" "66"
  fi

  # We dont need mint/elementary here because we dont use them as base anyway!
  case ${AE_RUN_CODENAME} in
  # Ubuntu
  focal) readonly AE_RUN_OBS_PREFIX="xUbuntu_20.04" ;;
  jammy) readonly AE_RUN_OBS_PREFIX="xUbuntu_22.04" ;;
  kinetic) readonly AE_RUN_OBS_PREFIX="xUbuntu_22.10" ;;
  lunar) readonly AE_RUN_OBS_PREFIX="xUbuntu_23.04" ;;
  mantic) readonly AE_RUN_OBS_PREFIX="xUbuntu_23.10" ;;
  noble) readonly AE_RUN_OBS_PREFIX="xUbuntu_23.10" ;;
  # Debian
  stretch) readonly AE_RUN_OBS_PREFIX="Debian_9" ;;
  buster) readonly AE_RUN_OBS_PREFIX="Debian_10" ;;
  bullseye) readonly AE_RUN_OBS_PREFIX="Debian_11" ;;
  bookworm) readonly AE_RUN_OBS_PREFIX="Debian_12" ;;
  trixie) readonly AE_RUN_OBS_PREFIX="Debian_Testing" ;;
  *) log_and_exit "Internal Error in ${FUNCNAME[0]}, Failed to match AE_RUN_OBS_PREFIX for ${AE_RUN_CODENAME}" "67" ;;

  esac

  log_var "AE_RUN_CODENAME"
  log_var "AE_RUN_OBS_PREFIX"

}

function add_ppas() {
  # Function to add ppa by reading ppas from ppa.list of from YAML key config.ppa
  # List/Config file should contain ppas in following format
  # ppa:ppa:<author>/<ppa> for example, ppa:mozillateam/firefox-next for adding firefox next/Beta PPA
  log_stage "Adding PPAs"
  local index
  local _ppa_dependencies=(apt-transport-https ca-certificates curl gnupg2 software-properties-common)
  # Install dependencies required
  if [ "$AE_RUN_IS_DEBIAN" != "true" ]; then
    log_info "Installing dependencies"
    if _install_dependencies "${_ppa_dependencies[@]}"; then
      log_debug "Installed dependency packages: ${_ppa_dependencies[*]}"
    else
      log_error "Failed to install dependency packages for PPAs"
      log_error "PPAs cannot be installed with this error!"
      return 21
    fi

    for index in "${AE_RUN_PARSED_PPA[@]}"; do
      log_info "Setting up PPA - $index"
      # Check for empty lines
      if [ "$index" == "" ]; then
        log_debug "Found and empty entry, moving on to next"
        continue
      fi

      if [[ ! $index =~ ^ppa:* ]]; then
        log_debug "PPA - ${index} does not start with prefix ppa: adding it."
        index="ppa:${index}"
      else
        log_debug "PPA - ${index} starts with prefix ppa:"
      fi

      if add-apt-repository -y "$index" 2>&1 | log_trace "${AE_LOG_PHASE_PPA}"; then
        log_success "Success!"
      else
        log_error "Some error occured while adding $index.\n"
      fi
    done
  else
    log_error "PPAs are not supported on Debian!"
    AE_RUN_STACK_ERR+=("config-error:config.tasks.ppa")
  fi

}

function add_repositories() {
  # This function adds repositories for several apps like
  # Google Chrome, Spotify, Google Cloud SDK, GCSFUSE(Part of google cloud),
  # Skype, Docker, Skype, Microsoft Visual Studio Code, Insync client, Wine-HQ etc
  # WARNING: Some repositories might not support latest version of Ubuntu.

  log_stage "Setting up repositories"

  AE_UMASK_PRE_HOOK="$(umask)"
  log_debug "Default UMASK is $AE_UMASK_PRE_HOOK"

  if [[ $AE_UMASK_PRE_HOOK != "0022" ]]; then
    log_notice "Setting UMASK to 0022 for the script to avoid APT errors"
    log_notice "This will be reverted at the end of this task."
    if ! umask 0022; then
      log_error "Failed to set UMASK to 0022 for task: Repositories"
      log_error "This may result in errors while updating repositories via packagekit"
      AE_RUN_STACK_ERR+=("umask-error::config.tasks.add_repos")
    fi
  else
    log_debug "No need to modify UMASK"
  fi

  local exit_status
  local sources_list_bak_ts

  # shellcheck disable=SC2034
  declare -r MENDELEY_SOURCE_FILE_CONTENT="# This file lists the repositories for Mendeley Desktop.
#
# These repositories should work with most recent Debian/Ubuntu-based Linux
# distributions.
#
# If you have any problems with Mendeley's Debian/Ubuntu repositories,
# you can let us know at http://feedback.mendeley.com
#
# The distribution name sets the release channel you want to use,
# which can be either \"stable\" or \"preview\"

deb https://desktop-download.mendeley.com/download/apt stable main"

  # install dependencies required
  _install_pre_requisites
  # if repository is not available for latest ubuntu release, use previous release
  # Be careful, things might not be compatible
  __fix_prerelease

  # OBS
  _map_to_obs_repos

  if [[ -e /etc/apt/sources.list ]]; then
    # Backup sources.list if it will be modified
    if [[ $AE_RUN_CONFIG_REPO_UBUNTU_MULTIVERSE == "true" ]] || [[ $AE_RUN_CONFIG_REPO_UBUNTU_UNIVERSE == "true" ]] ||
      [[ $AE_RUN_CONFIG_REPO_UBUNTU_RESTRICTED == "true" ]] || [[ $AE_RUN_CONFIG_REPO_DEBIAN_CONTRIB == "true" ]] ||
      [[ $AE_RUN_CONFIG_REPO_DEBIAN_NONFREE == "true" ]]; then
      log_warn "Configuration will modify etc/apt/sources.list"
      sources_list_bak_ts="$(date +'%Y%m%d-%H%M%S')"
      log_info "Backing up with suffix - ${sources_list_bak_ts}.ae.bak"
      if cp /etc/apt/sources.list "/etc/apt/sources.list.${sources_list_bak_ts}.ae.bak" 2>&1 | log_trace "${AE_LOG_PHASE_REPO}"; then
        log_success "Backed up!"
      else
        log_and_exit "Failed to create backup of sources.list before modification!" "68"
      fi
    else
      log_debug "No need to backup sources.list!"
    fi
  fi

  # Ubuntu multiverse/universe/restricted
  if [[ ${AE_RUN_DISTRO_NAME} == "ubuntu" ]]; then

    # Universe - Community-maintained free and open-source software.
    if [[ ${AE_RUN_CONFIG_REPO_UBUNTU_UNIVERSE} == "true" ]]; then
      log_info "Ubuntu/Universe"
      if add-apt-repository --yes universe 2>&1 | log_trace "${AE_LOG_PHASE_REPO}"; then
        log_success "OK"
      else
        log_error "Failed to add Ubuntu/Universe reposiroty!"
      fi
    else
      log_debug "Skipped adding Ubuntu/Universe repository"
    fi

    # Restricted - Proprietary drivers for devices.
    if [[ ${AE_RUN_CONFIG_REPO_UBUNTU_RESTRICTED} == "true" ]]; then
      log_info "Ubuntu/Restricted"
      if add-apt-repository --yes restricted --yes 2>&1 | log_trace "${AE_LOG_PHASE_REPO}"; then
        log_success "OK"
      else
        log_error "Failed to add Ubuntu/Restricted reposiroty!"
      fi
    else
      log_debug "Skipped adding Ubuntu/Restricted repository"
    fi

    # Multiverse - Software restricted by copyright or legal issues.
    if [[ ${AE_RUN_CONFIG_REPO_UBUNTU_MULTIVERSE} == "true" ]]; then
      log_info "Ubuntu/Multiverse"
      if add-apt-repository --yes multiverse 2>&1 | log_trace "${AE_LOG_PHASE_REPO}"; then
        log_success "OK"
      else
        log_error "Failed to add Ubuntu/Multiverse reposiroty!"
      fi
    else
      log_debug "Skipped adding Ubuntu/Multiverse repository"
    fi

    # # Partner Repositories
    # if [[ $AE_RUN_DISTRO_ROOT == "ubuntu" ]]; then
    #   log_debug "Checking for entries in sources.list"
    #   if grep -q "^deb http://archive.canonical.com/ubuntu $AE_BASE_CODENAME} partner" /etc/apt/sources.list; then
    #     log_success "Partner repositories are already enabled!"
    #   elif grep -qE "^[[:space:]]*#+[[:space:]]*deb[[:space:]]+http:\/\/archive\.canonical\.com\/ubuntu $AE_BASE_CODENAME} partner" /etc/apt/sources.list; then
    #     log_debug "Found commented out entry in sources.list file, enabling it"
    #     sed -i 's/\(# \)\(deb .*ubuntu '${DISTRO}' partner\)/\2/g' /etc/apt/sources.list
    #   fi
    # fi

  else
    log_debug "Distro is not Ubuntu, skip adding ubuntu specific components!"
  fi # ubuntu check

  # Debian Additional repos
  if [[ ${AE_RUN_DISTRO_NAME} == "debian" ]]; then

    # Contrib
    if [[ ${AE_RUN_CONFIG_REPO_DEBIAN_CONTRIB} == "true" ]]; then
      log_info "Debian/Contrib"
      if add-apt-repository --yes contrib 2>&1 | log_trace "${AE_LOG_PHASE_REPO}"; then
        log_success "OK"
      else
        log_error "Failed to add Debian/Contrib reposiroty!"
      fi
    else
      log_debug "Skipped adding Debian/Contrib repository"
    fi

    # Non-Free - Proprietary drivers for devices.
    if [[ ${AE_RUN_CONFIG_REPO_DEBIAN_NONFREE} == "true" ]]; then
      log_info "Debian/Non-Free"
      if add-apt-repository --yes non-free 2>&1 | log_trace "${AE_LOG_PHASE_REPO}"; then
        log_success "OK"
      else
        log_error "Failed to add Debian/Non-Free reposiroty!"
      fi
    else
      log_debug "Skipped adding Debian/Non-Free repository"
    fi

  else
    log_debug "Distro is not Debian, skip adding debian specific components!"
  fi # debian check

  # Add Google Chrome
  if [ "$AE_RUN_CONFIG_REPO_CHROME" == "true" ]; then
    if [[ ${AE_ARCH} == "amd64" ]]; then
      log_info "Google Chrome"
      log_debug "Adding Google Linux pacakage signing keys"

      __add_repo_keys \
        --format "asc" \
        --file-prefix "google" \
        --key-url https://dl.google.com/linux/linux_signing_key.pub

      log_debug "Create defaults file for google chrome(stable)"
      if printf "repo_add_once=\"false\"\nrepo_reenable_on_distupgrade=\"true\"" >/etc/default/google-chrome; then
        log_debug "Added /etc/default/google-chrome"
      else
        log_warn "Configured sources might be overwritten by Google-Chrome!"
      fi

      log_debug "Create defaults file for google chrome(beta)"
      if printf "repo_add_once=\"false\"\nrepo_reenable_on_distupgrade=\"true\"" >/etc/default/google-chrome-beta; then
        log_debug "Added /etc/default/google-chrome-beta"
      else
        log_warn "Configured sources might be overwritten by Google-Chrome!"
      fi

      log_debug "Create defaults file for google chrome(dev)"
      if printf "repo_add_once=\"false\"\nrepo_reenable_on_distupgrade=\"true\"" >/etc/default/google-chrome-dev; then
        log_debug "Added /etc/default/google-chrome-dev"
      else
        log_warn "Configured sources might be overwritten by Google-Chrome!"
      fi

      if echo "deb [arch=amd64 signed-by=${AE_APT_KEYRINGS_DIR}/google.gpg] http://dl.google.com/linux/chrome/deb/ stable main #Google-Chrome" >${AE_APT_SOURCES_DIR}/google-chrome.list; then
        log_success "OK"
      else
        log_error "Adding Google Chrome Repository failed"
        AE_RUN_STACK_ERR+=("add-repo-error:config.add_repo.chrome")
      fi

    else
      log_error "Google Chrome is not supported on this architecture($AE_ARCH)"
      AE_RUN_STACK_ERR+=("add-repo-unsupported:config.add_repo.chrome")
    fi
  else
    log_debug "Skipped Google chrome repository"
  fi

  # Spotify client
  if [ "$AE_RUN_CONFIG_REPO_SPOTIFY" == "true" ]; then
    if [[ ${AE_ARCH} == "amd64" ]]; then
      log_info "Spotify"
      __add_repo_keys --format "asc" \
        --file-prefix "spotify-7A3A762FAFD4A51F" \
        --key-url https://download.spotify.com/debian/pubkey_7A3A762FAFD4A51F.gpg

      if echo "deb [arch=$AE_ARCH signed-by=${AE_APT_KEYRINGS_DIR}/spotify-7A3A762FAFD4A51F.gpg] http://repository.spotify.com stable non-free #Spotify" >${AE_APT_SOURCES_DIR}/spotify.list; then
        log_success "OK"
      else
        log_error "Adding Spotify Repository Failed"
      fi
    else
      log_error "Spotify Desktop is not supported on this architecture(${AE_ARCH})"
      AE_RUN_STACK_ERR+=("add-repo-unsupported:config.add_repo.spotify")
    fi
  else
    log_debug "Skipped adding Spotify repository"
  fi

  # Skype
  if [ "$AE_RUN_CONFIG_REPO_SKYPE" == "true" ]; then
    if [[ ${AE_ARCH} == "amd64" ]]; then
      log_info "Skype"
      __add_repo_keys --format "asc" \
        --file-prefix "skype" \
        --key-url https://repo.skype.com/data/SKYPE-GPG-KEY

      if echo "deb [arch=$AE_ARCH signed-by=${AE_APT_KEYRINGS_DIR}/skype.gpg] https://repo.skype.com/deb stable main #Skype" >${AE_APT_SOURCES_DIR}/microsoft-skype.list; then
        log_success "OK"
      else
        log_error "Adding Skype for linux repository failed"
      fi
    else
      log_error "Skype for Linux is not supported on this architecture(${AE_ARCH})"
      AE_RUN_STACK_ERR+=("add-repo-unsupported:config.add_repo.skype")
    fi
  else
    log_debug "Skipped Skype for Linux."
  fi

  # Signal App
  if [ "$AE_RUN_CONFIG_REPO_SIGNAL" == "true" ]; then
    if [[ ${AE_ARCH} == "amd64" ]]; then
      log_info "Signal for Desktop"
      __add_repo_keys --format "asc" \
        --file-prefix "signal-desktop" \
        --key-url https://updates.signal.org/desktop/apt/keys.asc

      if echo "deb [arch=amd64 signed-by=${AE_APT_KEYRINGS_DIR}/signal-desktop.gpg] https://updates.signal.org/desktop/apt xenial main #Signal-for-Desktop" >${AE_APT_SOURCES_DIR}/signal-desktop.list; then
        log_success "OK"
      else
        log_error "Failed to addd Signal for desktop repository!"
      fi
    else
      log_error "Signal for Desktop is not supported on this (${AE_ARCH})"
      AE_RUN_STACK_ERR+=("add-repo-unsupported:config.add_repo.signal")
    fi
  else
    log_debug "Skipped adding Signal for desktop repository"
  fi

  # Mendeley Desktop App
  if [ "$AE_RUN_CONFIG_REPO_MENDELEY" == "true" ]; then
    if [[ ${AE_ARCH} == "amd64" ]]; then

      log_info "Mendeley desktop"
      apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 6F036044 2>&1 | log_trace "${AE_LOG_PHASE_APTKEY}" ||
        log_error "Adding Mendeley Desktop Key Failed"

      if echo "${MENDELEY_SOURCE_FILE_CONTENT}" >${AE_APT_SOURCES_DIR}/mendeleydesktop.list; then
        log_success "OK"
      else
        log_error "Failed to add mendeley repository!"
      fi
    else
      log_error "Mendeley Desktop is not supported on this architecture(${AE_ARCH})"
      AE_RUN_STACK_ERR+=("add-repo-unsupported:config.add_repo.mendeley")
    fi

  else
    log_debug "Skipped adding Mendeley repository"
  fi

  if [ "$AE_RUN_CONFIG_REPO_WINEHQ" == "true" ]; then
    if [[ ${AE_ARCH} == "amd64" ]]; then
      log_info "WineHQ"
      if [[ ${AE_RUN_CODENAME} == "buster" ]]; then
        log_error "Latest version of WINE depends on libfaudio0 package,"
        log_error "which is not available on your distribution!"
        log_warn "For more information visit https://forum.winehq.org/viewtopic.php?f=8&t=32192"
      else
        __add_repo_keys --format "asc" \
          --file-prefix "wine-hq" \
          --key-url https://dl.winehq.org/wine-builds/winehq.key
        if echo "deb [signed-by=${AE_APT_KEYRINGS_DIR}/wine-hq.gpg] https://dl.winehq.org/wine-builds/${AE_RUN_DISTRO_NAME}/ ${AE_RUN_CODENAME} main #WineHQ" >${AE_APT_SOURCES_DIR}/winehq.list; then
          log_success "OK"
          log_info "Enabling i386 architecture"
          if dpkg --add-architecture i386 2>&1 | log_trace ${AE_LOG_PHASE_REPO}; then
            log_success "OK"
          else
            log_error "Failed to enable i386 architecture! WineHQ packages cannot be installed!"
            AE_RUN_STACK_ERR+=("repo-winehq-add-arch-error::config.add_repo.winehq")
          fi
        else
          log_error "Adding WineHQ repository failed"
        fi
      fi
    else
      log_error "WineHQ is not supported on this architecture(${AE_ARCH})"
      AE_RUN_STACK_ERR+=("add-repo-unsupported:config.add_repo.winehq")
    fi
  else
    log_info "Skipped adding WineHQ."
  fi

  # Google Cloud SDK
  # shellcheck disable=SC2235
  if [[ $AE_RUN_CONFIG_REPO_GCP == "true" ]] || ([[ ${AE_RUN_CONFIG_REPO_GCSFUSE} == "true" ]] && [[ ${AE_ARCH} == "amd64" ]]); then
    log_debug "Adding GCP packaging keys"
    __add_repo_keys --format "asc" \
      --file-prefix "google-cloud-packaging" \
      --key-url https://packages.cloud.google.com/apt/doc/apt-key.gpg
  else
    log_debug "Not adding Google Cloud Package keys"
  fi

  # Google Cloud SDK
  if [ "$AE_RUN_CONFIG_REPO_GCP" == "true" ]; then
    log_info "Google-Cloud-SDK"
    if echo "deb [arch=$AE_ARCH signed-by=${AE_APT_KEYRINGS_DIR}/google-cloud-packaging.gpg] http://packages.cloud.google.com/apt cloud-sdk main #Google-Cloud-SDK" >${AE_APT_SOURCES_DIR}/google-cloud-sdk.list; then
      log_success "OK"
    else
      log_error "Adding Google Cloud SDK Repository failed"
    fi
  else
    log_debug "Skipped adding Google Cloud SDK."
  fi

  # GCSFUSE
  if [ "$AE_RUN_CONFIG_REPO_GCSFUSE" == "true" ]; then

    if [[ $AE_ARCH == "amd64" ]]; then
      log_info "GCSFUSE"
      if echo "deb [arch=$AE_ARCH signed-by=${AE_APT_KEYRINGS_DIR}/google-cloud-packaging.gpg] http://packages.cloud.google.com/apt gcsfuse-${AE_RUN_CODENAME} main #GCSFUSE" >${AE_APT_SOURCES_DIR}/gcsfuse.list; then
        log_success "OK"
      else
        log_error "Adding GCSFUSE repository failed"
      fi
    else
      log_error "GCSFUSE is not supported on this architecture(${AE_ARCH})"
      AE_RUN_STACK_ERR+=("add-repo-unsupported:config.add_repo.gcsfuse")
    fi

  else
    log_debug "Skipped adding GCSFUSE"
  fi

  # Microsoft Keys
  # shellcheck disable=SC2235
  if [[ ($AE_ARCH == "amd64") && ($AE_RUN_CONFIG_REPO_AZURECLI == "true" || ${AE_RUN_CONFIG_REPO_EDGE} == "true") ]]; then
    log_debug "Adding Microsoft keys."
    __add_repo_keys \
      --format "asc" \
      --file-prefix "microsoft" \
      --key-url https://packages.microsoft.com/keys/microsoft.asc
  elif [[ ${AE_RUN_CONFIG_REPO_VSCODE} == "true" ]]; then
    log_debug "Adding Microsoft keys."
    __add_repo_keys \
      --format "asc" \
      --file-prefix "microsoft" \
      --key-url https://packages.microsoft.com/keys/microsoft.asc
  else
    log_debug "None of the MS repos are being added, So no need to add microsoft keys."
  fi

  # VSCode
  if [[ ${AE_RUN_CONFIG_REPO_VSCODE} == "true" ]]; then
    log_info "VSCode"
    if echo "deb [arch=$AE_ARCH signed-by=${AE_APT_KEYRINGS_DIR}/microsoft.gpg] https://packages.microsoft.com/repos/code stable main #Visual-Studio-Code" >${AE_APT_SOURCES_DIR}/vscode.list; then
      log_success "OK"
    else
      log_error "Failed to addd VSCode repository!"
    fi

  else
    log_debug "Skipped adding VSCode repository"
  fi

  # Azure cli
  if [[ ${AE_RUN_CONFIG_REPO_AZURECLI} == "true" ]]; then
    # libc6 errors occur with latest versions of azure cli on buster.
    # Drop support for them.
    if [[ ${AE_ARCH} == "amd64" ]]; then
      if [[ ${AE_RUN_CODENAME} != "buster" ]]; then
        log_info "Azure CLI"
        if echo "deb [arch=$AE_ARCH signed-by=${AE_APT_KEYRINGS_DIR}/microsoft.gpg] https://packages.microsoft.com/repos/azure-cli/ ${AE_RUN_CODENAME} main #Azure CLI" >${AE_APT_SOURCES_DIR}/azure-cli.list; then
          log_success "OK"
        else
          log_error "Failed to addd Azure CLI repository!"
        fi
      else
        log_error "Azure CLI cannot be installed via package manager on ${AE_DISTRO_PRETTY_NAME}/${AE_ARCH}"
        log_warn "See https://docs.microsoft.com/en-us/cli/azure/install-azure-cli-linux?pivots=script"
        AE_RUN_STACK_ERR+=("add-repo-unsupported:config.add_repo.azurecli")
      fi
    else
      log_error "Azure CLI cannot be installed via package manager on ${AE_DISTRO_PRETTY_NAME}/${AE_ARCH}"
      log_warn "See https://docs.microsoft.com/en-us/cli/azure/install-azure-cli-linux?pivots=script"
      AE_RUN_STACK_ERR+=("add-repo-unsupported:config.add_repo.azurecli")
    fi
  else
    log_debug "Skipped adding Azure CLI repository"
  fi

  # Microsoft Edge
  if [[ ${AE_RUN_CONFIG_REPO_EDGE} == "true" ]]; then
    if [[ ${AE_ARCH} == "amd64" ]]; then
      log_info "Microsoft Edge"
      log_debug "Create /etc/default files"

      log_debug "Create defaults file for edge browser(stable)"
      if printf "repo_add_once=\"false\"\nrepo_reenable_on_distupgrade=\"false\"" >/etc/default/microsoft-edge; then
        log_debug "Added /etc/default/microsoft-edge"
      else
        log_warn "Failed to write /etc/default/etc/default/microsoft-edge"
        log_warn "Configured sources might be overwritten by Microsoft Edge Browser!"
      fi

      log_debug "Create defaults file for edge browser(beta)"
      if printf "repo_add_once=\"false\"\nrepo_reenable_on_distupgrade=\"false\"" >/etc/default/microsoft-edge-beta; then
        log_debug "Added /etc/default/microsoft-edge-beta"
      else
        log_warn "Failed to write /etc/default/etc/default/microsoft-edge-beta"
        log_warn "Configured sources might be overwritten by Microsoft Edge Browser!"
      fi

      log_debug "Create defaults file for edge browser(dev)"
      if printf "repo_add_once=\"false\"\nrepo_reenable_on_distupgrade=\"false\"" >/etc/default/microsoft-edge-dev; then
        log_debug "Added /etc/default/microsoft-edge-dev"
      else
        log_warn "Failed to write /etc/default/etc/default/microsoft-edge"
        log_warn "Configured sources might be overwritten by Microsoft Edge Browser!"
      fi

      if echo "deb [arch=$AE_ARCH signed-by=${AE_APT_KEYRINGS_DIR}/microsoft.gpg] https://packages.microsoft.com/repos/edge stable main #Microsoft Edge" >${AE_APT_SOURCES_DIR}/microsoft-edge.list; then
        log_success "OK"
      else
        log_error "Failed to addd Microsoft Edge repository!"
      fi
    else
      log_error "Microsoft Edge is not supported on this architecture($AE_ARCH)!"
      AE_RUN_STACK_ERR+=("add-repo-unsupported:config.add_repo.edge")
    fi
  else
    log_debug "Skipped adding Microsoft Edge repository"
  fi

  # Docker CE
  if [ "$AE_RUN_CONFIG_REPO_DOCKER" == "true" ]; then
    log_info "Docker-CE"
    __add_repo_keys --format "asc" \
      --file-prefix "docker-ce" \
      --key-url https://download.docker.com/linux/"${AE_RUN_DISTRO_NAME}"/gpg
    log_debug "Adding Docker(Docker Inc) sources .list"

    if echo "deb [arch=$AE_ARCH signed-by=${AE_APT_KEYRINGS_DIR}/docker-ce.gpg] https://download.docker.com/linux/${AE_RUN_DISTRO_NAME}  ${AE_RUN_CODENAME} stable #Docker-Community-Edition" >${AE_APT_SOURCES_DIR}/docker-ce.list; then
      log_success "OK"
    else
      log_error "Adding Docker-CE repository failed"
    fi

  else
    log_debug "Skipped Docker-CE"
  fi

  # Github CLI
  if [ "$AE_RUN_CONFIG_REPO_GH" == "true" ]; then
    log_info "GitHub CLI"
    __add_repo_keys --format "gpg" \
      --file-prefix "githubcli-archive-keyring" \
      --key-url https://cli.github.com/packages/githubcli-archive-keyring.gpg
    if echo "deb [arch=$AE_ARCH signed-by=${AE_APT_KEYRINGS_DIR}/githubcli-archive-keyring.gpg ] https://cli.github.com/packages stable main #GitHub-CLI" >${AE_APT_SOURCES_DIR}/github-cli.list; then
      log_success "OK"
    else
      log_error "Adding GH CLi repository failed"
    fi
  else
    log_debug "Skipped GitHub CLI(gh)."
  fi

  # Hashicorp
  if [ "$AE_RUN_CONFIG_REPO_HASHICORP" == "true" ]; then
    if [ "$AE_ARCH" == "amd64" ]; then
      log_info "Hashicorp"
      __add_repo_keys --format "asc" \
        --file-prefix "hashicorp" \
        --key-url https://apt.releases.hashicorp.com/gpg

      if echo "deb [arch=amd64 signed-by=${AE_APT_KEYRINGS_DIR}/hashicorp.gpg] https://apt.releases.hashicorp.com ${AE_RUN_CODENAME} main#Hashicorp-Packages" >${AE_APT_SOURCES_DIR}/hashicorp.list; then
        log_success "OK"
      else
        log_error "Failed to add hashicorp repository"
      fi

    else
      log_error "Hashicorp repository is not supported on this architecture($AE_ARCH)!"
      AE_RUN_STACK_ERR+=("add-repo-unsupported:config.add_repo.hashicorp")
    fi
  else
    log_debug "Skipped adding Hashicorp repository"
  fi

  # Bazel
  if [[ ${AE_RUN_CONFIG_REPO_BAZEL} == "true" ]]; then
    if [ "$AE_ARCH" == "amd64" ]; then
      log_info "Bazel"
      __add_repo_keys --format "asc" \
        --file-prefix "bazel" \
        --key-url https://bazel.build/bazel-release.pub.gpg

      if echo "deb [arch=amd64 signed-by=${AE_APT_KEYRINGS_DIR}/bazel.gpg] https://storage.googleapis.com/bazel-apt stable jdk1.8 #Bazel" >${AE_APT_SOURCES_DIR}/bazel.list; then
        log_success "OK"
      else
        log_error "Failed to add bazel repository"
      fi

    else
      log_error "Bazel repository is not supported on this architecture($AE_ARCH)!"
      AE_RUN_STACK_ERR+=("add-repo-unsupported:config.add_repo.bazel")
    fi
  else
    log_debug "Skipped adding Bazel repository"
  fi

  # gVisor container Runtime
  if [[ $AE_RUN_CONFIG_REPO_GVISOR == "true" ]]; then

    if [[ $AE_ARCH == "amd64" ]] || [[ $AE_ARCH == "arm64" ]]; then
      log_info "gVisor"

      # Adding gVisor Keys
      __add_repo_keys \
        --format "asc" \
        --file-prefix "gvisor" \
        --key-url https://gvisor.dev/archive.key

      if echo "deb [arch=$AE_ARCH signed-by=${AE_APT_KEYRINGS_DIR}/gvisor.gpg] https://storage.googleapis.com/gvisor/releases release main #gVisor-Container-Runtime" >${AE_APT_SOURCES_DIR}/gvisor.list; then
        log_success "OK"
      else
        log_error "Adding gVisor repository failed!"
      fi

    else
      log_error "gVisor is not supported on this architecture(${AE_ARCH})"
      log_dev "Visit https://gvisor.dev/ for more info"
      AE_RUN_STACK_ERR+=("add-repo-unsupported:config.add_repo.gvisor")
    fi

  else
    # gVisor is not enabled
    log_debug "Skipped addinng gVisor repository."
  fi

  # Podman via OBS
  if [[ ${AE_RUN_CONFIG_REPO_PODMAN} == "true" ]]; then
    if [[ ${AE_ARCH} == "amd64" ]]; then
      case ${AE_RUN_CODENAME} in
      jammy)
        log_info "Podman"
        __add_repo_keys \
          --format "asc" \
          --file-prefix "obs-podman-${AE_RUN_CODENAME}" \
          --key-url https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/${AE_RUN_OBS_PREFIX}/Release.key
        if echo "deb [arch=$AE_ARCH signed-by=${AE_APT_KEYRINGS_DIR}/obs-podman-${AE_RUN_CODENAME}.gpg] https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/${AE_RUN_OBS_PREFIX}/ / #Podman (via OBS)" >${AE_APT_SOURCES_DIR}/podman.list; then
          log_success "OK"
        else
          log_error "Adding Podman repository failed!"
        fi
        ;;
      *)
        log_error "Podman is not supported on ${AE_DISTRO_NAME}/${AE_ARCH}"
        ;;
      esac
    else
      log_error "Podman is not supported on ${AE_DISTRO_NAME}/${AE_ARCH}"
    fi

  else
    # Podman is not enabled
    log_debug "Skipped addinng Podman repository."
  fi

  # Sublime Text
  if [ "$AE_RUN_CONFIG_REPO_SUBLIMETEXT" == "true" ]; then
    if [ "$AE_ARCH" == "amd64" ]; then
      log_info "SublimeText"
      __add_repo_keys --format "asc" \
        --file-prefix "sublimetext" \
        --key-url https://download.sublimetext.com/sublimehq-pub.gpg

      if echo "deb [arch=amd64 signed-by=${AE_APT_KEYRINGS_DIR}/sublimetext.gpg] https://download.sublimetext.com/ apt/stable/ #SublimeText Editor" >${AE_APT_SOURCES_DIR}/sublimetext.list; then
        log_success "OK"
      else
        log_error "Failed to add SublimeText repository"
      fi

    else
      log_error "SublimeText repository is not supported on this architecture($AE_ARCH)!"
      AE_RUN_STACK_ERR+=("add-repo-unsupported:config.add_repo.sublimetext")
    fi
  else
    log_debug "Skipped adding SublimeText repository"
  fi

  # Brave Browser
  if [ "$AE_RUN_CONFIG_REPO_BRAVE_BROWSER" == "true" ]; then
    if [ "$AE_ARCH" == "amd64" ]; then
      log_info "Brave Browser"
      __add_repo_keys \
        --format "gpg" \
        --file-prefix "brave-browser-archive-keyring" \
        --key-url https://brave-browser-apt-release.s3.brave.com/brave-browser-archive-keyring.gpg

      log_debug "Create defaults file for brave browser"
      if printf "repo_add_once=\"false\"\nrepo_reenable_on_distupgrade=\"false\"" >/etc/default/brave-browser; then
        log_debug "Added /etc/default/brave-browser"
      else
        log_warn "Failed to write /etc/default/brave-browser"
        log_warn "Configured sources might be overwritten by Brave Browser!"
      fi
      # We do not add beta and nightly as they have different signing keys!

      if echo "deb [arch=amd64 signed-by=${AE_APT_KEYRINGS_DIR}/brave-browser-archive-keyring.gpg] https://brave-browser-apt-release.s3.brave.com/ stable main #Brave-Browser" >${AE_APT_SOURCES_DIR}/brave-browser.list; then
        log_success "OK"
      else
        log_error "Failed to add Brave Browser repository"
      fi

    else
      log_error "Brave Browser repository is not supported on this architecture($AE_ARCH)!"
      AE_RUN_STACK_ERR+=("add-repo-unsupported:config.add_repo.brave_browser")
    fi
  else
    log_debug "Skipped adding Brave Browser repository"
  fi

  # Slack
  if [ "$AE_RUN_CONFIG_REPO_SLACK" == "true" ]; then
    if [ "$AE_ARCH" == "amd64" ]; then
      log_info "Slack Desktop"
      __add_repo_keys \
        --format "asc" \
        --file-prefix "slack-archive-keyring" \
        --key-url https://packagecloud.io/slacktechnologies/slack/gpgkey

      log_debug "Create defaults file for slack"
      if printf "repo_add_once=\"false\"\nrepo_reenable_on_distupgrade=\"false\"" >/etc/default/slack; then
        log_success "OK"
      else
        log_warn "Failed to write /etc/default/slack"
        log_warn "Configured sources.list  file might be overwritten by Slack !"
      fi

      if echo "deb [arch=amd64 signed-by=${AE_APT_KEYRINGS_DIR}/slack-archive-keyring.gpg] https://packagecloud.io/slacktechnologies/slack/debian/ jessie main #Slack" >${AE_APT_SOURCES_DIR}/slack.list; then
        log_success "OK"
      else
        log_error "Failed to add Slack repository"
      fi

    else
      log_error "Slack is not supported on this architecture($AE_ARCH)!"
      AE_RUN_STACK_ERR+=("add-repo-unsupported:config.add_repo.slack")
    fi
  else
    log_debug "Skipped adding Slack repository"
  fi

  # Vivaldi Browser
  if [ "$AE_RUN_CONFIG_REPO_BRAVE_BROWSER" == "true" ]; then
    if [ "$AE_ARCH" == "amd64" ]; then
      log_info "Vivaldi Browser"
      __add_repo_keys \
        --format "asc" \
        --file-prefix "vivaldi-stable-keyring" \
        --key-url https://repo.vivaldi.com/archive/linux_signing_key.pub

      log_debug "Create defaults file for vivaldi browser"
      if printf "repo_add_once=\"false\"\nrepo_reenable_on_distupgrade=\"false\"" >/etc/default/vivaldi; then
        log_debug "Added /etc/default/vivaldi"
      else
        log_warn "Failed to write /etc/default/vivaldi"
        log_warn "Configured sources might be overwritten by Vivaldi Browser!"
      fi
      # We do not add beta and nightly as they have different signing keys!

      if echo "deb [arch=amd64 signed-by=${AE_APT_KEYRINGS_DIR}/vivaldi-stable-keyring.gpg] https://repo.vivaldi.com/archive/deb/ stable main #Vivaldi-Browser" >${AE_APT_SOURCES_DIR}/vivaldi.list; then
        log_success "OK"
      else
        log_error "Failed to add Vivaldi Browser repository"
      fi

    else
      log_error "Vivaldi Browser repository is not supported on this architecture($AE_ARCH)!"
      AE_RUN_STACK_ERR+=("add-repo-unsupported:config.add_repo.vivaldi")
    fi
  else
    log_debug "Skipped adding Vivaldi Browser repository"
  fi

  # ProtonVPN
  if [ "$AE_RUN_CONFIG_REPO_PROTONVPN" == "true" ]; then
    if [[ $AE_ARCH == "amd64" ]]; then
      log_info "ProtonVPN Client"
      __add_repo_keys \
        --format "asc" \
        --file-prefix "protonvpn-stable-archive-keyring" \
        --key-url https://repo.protonvpn.com/debian/public_key.asc

      if echo "deb [arch=${AE_ARCH} signed-by=${AE_APT_KEYRINGS_DIR}/protonvpn-stable-archive-keyring.gpg] https://repo.protonvpn.com/debian stable main #ProtonVPN-Client" >${AE_APT_SOURCES_DIR}/protonvpn-stable.list; then
        log_success "OK"
      else
        log_error "Failed to add ProtonVPN repository"
        AE_RUN_STACK_ERR+=("repo-add-error::config.add_repo.protonvpn")
      fi
    else
      log_error "ProtonVPN repository is not supported on this architecture($AE_ARCH)!"
      AE_RUN_STACK_ERR+=("add-repo-unsupported:config.add_repo.protonvpn")
    fi
  else
    log_debug "Skipped adding ProtonVPN repository"
  fi

  # Anaconda
  if [ "$AE_RUN_CONFIG_REPO_MINICONDA" == "true" ]; then
    if [ "$AE_ARCH" == "amd64" ]; then
      log_info "Miniconda"
      __add_repo_keys \
        --format "asc" \
        --file-prefix "anaconda-archive-keyring" \
        --key-url "https://repo.anaconda.com/pkgs/misc/gpgkeys/anaconda.asc"

      if echo "deb [arch=${AE_ARCH} signed-by=${AE_APT_KEYRINGS_DIR}/anaconda-archive-keyring.gpg] https://repo.anaconda.com/pkgs/misc/debrepo/conda stable main" >${AE_APT_SOURCES_DIR}/miniconda.list; then
        log_success "OK"
      else
        log_error "Failed to add Miniconda repository"
        AE_RUN_STACK_ERR+=("repo-add-error::config.add_repo.miniconda")
      fi
    else
      log_error "Miniconda repository is not supported on this architecture($AE_ARCH)!"
      AE_RUN_STACK_ERR+=("add-repo-unsupported:config.add_repo.miniconda")
    fi
  else
    log_debug "Skipped adding Miniconda repository"
  fi

  # NeuroDebian
  if [ "$AE_RUN_CONFIG_REPO_NEURODEBIAN" == "true" ]; then
    if [ "$AE_ARCH" == "amd64" ]; then
      log_info "NeuroDebian"
      __add_repo_keys \
        --format "asc" \
        --file-prefix "neurodebian-archive-keyring" \
        --key-url "https://keyserver.ubuntu.com/pks/lookup?op=get&search=0xdd95cc430502e37ef840aceea5d32f012649a5a9"

      declare -r AE_RUN_REPO_NEURODEBIAN_SOURCES_CONTENT="# NeuroDebian Repositories
deb [signed-by=${AE_APT_KEYRINGS_DIR}/neurodebian-archive-keyring.gpg] http://neuro.debian.net/debian data main contrib non-free #NeuroDebian-Data
deb [signed-by=${AE_APT_KEYRINGS_DIR}/neurodebian-archive-keyring.gpg] http://neuro.debian.net/debian ${AE_RUN_CODENAME} main contrib non-free #NeuroDebian"

      if echo "${AE_RUN_REPO_NEURODEBIAN_SOURCES_CONTENT}" >${AE_APT_SOURCES_DIR}/neurodebian.list; then
        log_success "OK"
      else
        log_error "Failed to add NeuroDebian repository"
        AE_RUN_STACK_ERR+=("repo-add-error::config.add_repo.neurodebian")
      fi
    else
      log_error "NeuroDebian repository is not supported on this architecture($AE_ARCH)!"
      AE_RUN_STACK_ERR+=("add-repo-unsupported::config.add_repo.neurodebian")
    fi
  else
    log_debug "Skipped adding NeuroDebian repository"
  fi

  # Element (riot.im)
  if [[ $AE_RUN_CONFIG_REPO_ELEMENT_IO == "true" ]]; then
    if [ "$AE_ARCH" == "amd64" ]; then
      log_info "Element / Riot (Matrix Client)"
      __add_repo_keys \
        --format "gpg" \
        --file-prefix "element-io-archive-keyring" \
        --key-url "https://packages.element.io/debian/element-io-archive-keyring.gpg"

      if echo "deb [signed-by=/usr/share/keyrings/element-io-archive-keyring.gpg] https://packages.element.io/debian/ default main #element.io" >${AE_APT_SOURCES_DIR}/element-io.list; then
        log_success "OK"
      else
        log_error "Failed to add Element.io repository"
        AE_RUN_STACK_ERR+=("repo-add-error::config.add_repo.element")
      fi
    else
      log_error "NeuElement.io/Riot.imroDebian repository is not supported on this architecture($AE_ARCH)!"
      AE_RUN_STACK_ERR+=("add-repo-unsupported::config.add_repo.element")
    fi
  else
    log_debug "Skipped adding Element.io/Riot.im repository"
  fi

  # ROS2
  # Arch support varies on distro so lot of ugly elifs.
  ros2_supported="false"

  if [[ $AE_RUN_CONFIG_REPO_ROS2 == "true" ]] && [[ ${AE_RUN_FIX_ACTIVE} == "true" ]]; then
    log_info "ROS2"
    log_error "You have enabled --pre-release option."
    log_error "ROS2 depends heavily on packages included in the distribution."
    log_error "ROS2 repositories will not be added for sanity of your system!"

  elif [[ $AE_RUN_CONFIG_REPO_ROS == "true" ]] && [[ ${AE_RUN_FIX_ACTIVE} == "false" ]]; then

    log_info "ROS2"

    # Distro/Version/Arch checks
    if [[ $AE_RUN_DISTRO_NAME == "ubuntu" ]]; then
      if [[ $AE_RUN_CODENAME == "focal" ]] || [[ $AE_RUN_CODENAME == "jammy" ]]; then
        ros2_supported="true"
        log_debug "ROS2 is available on $AE_RUN_CODENAME/$AE_ARCH"
      fi
    fi #ubuntu

    if [[ $ros2_supported == "true" ]]; then
      log_debug "Adding ROS2 repo key"
      __add_repo_keys --format "asc" \
        --file-prefix "ros2" \
        --key-url https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc

      if echo "deb [arch=$AE_ARCH signed-by=${AE_APT_KEYRINGS_DIR}/ros2.gpg]  http://packages.ros.org/ros2/ubuntu ${AE_RUN_CODENAME} main #ROS-Repository" >$AE_APT_SOURCES_DIR/ros2.list; then
        log_success "OK"
      else
        log_error "Adding ROS repository failed!"
      fi

    else
      log_warn "ROS2 is not supported on ${AE_DISTRO_PRETTY_NAME}"
    fi # ros_arch_supported

  else
    log_debug "Skipped ROS2"
  fi # AE_RUN_CONFIG_REPO_ROS

  # ROS
  # Arch support varies on distro so lot of ugly elifs.
  ros_arch_supported="false"

  if [[ $AE_RUN_CONFIG_REPO_ROS == "true" ]] && [[ ${AE_RUN_FIX_ACTIVE} == "true" ]]; then
    log_info "ROS"
    log_error "You have enabled --pre-release option."
    log_error "ROS depends heavily on packages included in the distribution."
    log_error "ROS repositories will not be added for sanity of your system!"

  elif [[ $AE_RUN_CONFIG_REPO_ROS == "true" ]] && [[ ${AE_RUN_FIX_ACTIVE} == "false" ]]; then

    log_info "ROS"

    # Distro/Version/Arch checks
    if [[ $AE_RUN_DISTRO_NAME == "ubuntu" ]]; then
      if [[ $AE_RUN_CODENAME == "focal" ]]; then
        ros_arch_supported="true"
        log_debug "ROS is available on $AE_RUN_CODENAME/$AE_ARCH"
      fi
    fi #ubuntu

    if [ "$AE_RUN_DISTRO_NAME" == "debian" ]; then
      log_warn "ROS is no longer supported on Debian"
    fi #debian

    if [[ $ros_arch_supported == "true" ]]; then
      log_debug "Adding ROS repo key "
      __add_repo_keys --format "asc" \
        --file-prefix "ros" \
        --key-url https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc

      if [[ $AE_RUN_CONFIG_FLAG_UF_MIRROR == "true" ]]; then
        log_warn "UF ROS repository is no loger syncing with upstream."
        log_warn "This feature will be enabled once the mirror is back in sync!"
        log_warn "Till then, upstream is being used!"
      fi

      if echo "deb [arch=$AE_ARCH signed-by=${AE_APT_KEYRINGS_DIR}/ros.gpg] http://packages.ros.org/ros/ubuntu ${AE_RUN_CODENAME} main #ROS-Repository" >$AE_APT_SOURCES_DIR/ros.list; then
        log_success "OK"
      else
        log_error "Adding ROS repository failed!"
      fi

    else
      log_error "ROS is not supported on ${AE_DISTRO_PRETTY_NAME}"
    fi # ros_arch_supported

  else
    log_debug "Skipped ROS"
  fi # AE_RUN_CONFIG_REPO_ROS

  # Reset UMASK if not 0022
  if [[ $AE_UMASK_PRE_HOOK != "0022" ]]; then
    log_notice "Setting UMASK back to $AE_UMASK_PRE_HOOK"
    if ! umask "$AE_UMASK_PRE_HOOK"; then
      log_error "Failed to set UMASK back to $AE_UMASK_PRE_HOOK"
    fi
  else
    log_debug "No need to modify UMASK (post-task-hook)"
  fi

  update_repos

}

function __fix_permissions() {

  # Fix permissions
  # Expects 2 args
  # Arg 1 : Path to check
  # Arg 2 : Permission in octal

  local check_path expected_permissions
  local path_attrs

  if [[ $# -lt 2 ]]; then
    log_and_exit "Internal Error in ${FUNCNAME[0]}, expected 2 args, got $#" "19"
  fi

  check_path="${1}"
  expected_permissions="${2}"

  # check if path exists
  if [[ ! -e ${check_path} ]]; then
    log_error "Internal Error in ${FUNCNAME[0]}, path(${check_path}) not found!"
    # immediately return
    return
  fi

  # check if attributes are valid
  if [[ ! ${expected_permissions} =~ ^[4-7][04-7][04-7]$ ]]; then
    log_error "Expected permissions are invalid(${expected_permissions})"
    log_and_exit "Internal Error! in ${FUNCNAME[0]}" "19"
  fi

  # check permissions and fix it
  path_attrs="$(stat -L -c %a "${check_path}")"
  if [[ ${path_attrs} != "${expected_permissions}" ]]; then
    log_warn "${check_path} has INCORRECT permissions(${path_attrs})!"
    if chmod "${expected_permissions}" "${check_path}" 2>&1 | log_trace "${AE_LOG_PHASE_APTKEY}"; then
      log_success "Fixed!"
    else
      log_error "Failed to fix permissions!"
      # immediately return
      return 68
    fi
  else
    log_debug "${check_path} has expected permissions(${expected_permissions})."
  fi
}

function __add_repo_keys() {
  if [[ $# -ne 6 ]]; then
    log_and_exit "Internal Error! Expected 6 args (got $#) for ${FUNCNAME[0]}!" "19"
  fi

  local exit_code
  local key_url key_file_prefix key_format

  while [ "${1}" != "" ]; do
    case ${1} in
    -k | --key-url)
      shift
      key_url="${1}"
      ;;
    -p | --file-prefix)
      shift
      key_file_prefix="${1}"
      ;;
    -f | --format)
      shift
      key_format="${1}"
      ;;
    *)
      log_and_exit "Invalid internal function arguments for ${FUNCNAME[0]}!" "19"
      ;;
    esac
    shift
  done

  log_property "Key file URL" "${key_url}"
  log_property "Key file Format" "${key_format}"
  log_property "Key file name" "${key_file_prefix}.${key_format}"

  # check if format is valid
  if [[ ! ${key_format} =~ ^(gpg|asc)$ ]]; then
    log_and_exit "Internal Error in ${FUNCNAME[0]} -f/--format can only accept gpg or asc[${key_format}]/" "19"
  fi

  # check if file prefix is valid
  # shellcheck disable=SC1001
  case "$key_file_prefix" in
  ubuntu* | linuxmint* | mint* | debian* | pop* | system76* | canonical*)
    log_and_exit "Internal Error! Using reserved prefix for key prefix!" "19"
    exit 19
    ;;
  esac

  if [[ ! ${key_file_prefix} =~ ^[a-zA-Z][a-zA-Z0-9\-]+[a-zA-Z0-9]$ ]]; then
    log_and_exit "Internal Error in ${FUNCNAME[0]}  --file-prefix is invalid!" "19"
  fi

  if [[ ! ${key_url} =~ ^https:// ]]; then
    log_error "APT Key URL does not start with https://."
    log_error "Got (${key_url})!"
    log_and_exit "Internal Error in ${FUNCNAME[0]} APT key URL is invalid!" "19"
  fi

  # check if ${AE_APT_KEYRINGS_DIR} is present
  if [[ ! -d ${AE_APT_KEYRINGS_DIR} ]]; then
    log_error "${AE_APT_KEYRINGS_DIR} is missing!"
    log_and_exit "Your installation of ${AE_DISTRO_NAME} is broken!" "64"
  fi

  # fetch key
  if [[ -e ${AE_APT_KEYRINGS_DIR}/${key_file_prefix}.gpg ]]; then
    log_warn "GPG Key file ${key_file_prefix}.${key_format} already exists!"
  else
    log_debug "Fetching key"

    curl -sSfL -m 20 -o "${AE_APT_KEYRINGS_DIR}/${key_file_prefix}.${key_format}" "${key_url}" 2>&1 | log_trace "${AE_LOG_PHASE_APTKEY}"
    exit_code="$?"
    if [[ $exit_code -eq 0 ]]; then
      log_debug "OK"
    else
      log_error "Failed to fetch keys from ${key_url}(${exit_code})!"
    fi
  fi

  # check if file has correct permissions
  __fix_permissions "${AE_APT_KEYRINGS_DIR}/${key_file_prefix}.${key_format}" "644"

  # check if file needs to be converted
  if [[ ${key_format} == "asc" ]]; then

    log_debug "Key is in ascii armored format. Converting it."
    if [[ -e "${AE_APT_KEYRINGS_DIR}/${key_file_prefix}.gpg" ]]; then
      log_warn "De-armored file already exists!"
    else
      gpg --dearmor --output "${AE_APT_KEYRINGS_DIR}/${key_file_prefix}.gpg" "${AE_APT_KEYRINGS_DIR}/${key_file_prefix}.asc" 2>&1 | log_trace "${AE_LOG_PHASE_APTKEY}"
      exit_code="$?"
      if [[ $exit_code -eq 0 ]]; then
        log_debug "Successfully converted ascii armored GPG key file."
      else
        log_error "Failed to convert ascii armored GPG key file."
      fi
    fi

    # check and fix permissions for converted file
    __fix_permissions "${AE_APT_KEYRINGS_DIR}/${key_file_prefix}.gpg" "644"

  else
    log_debug "No need to convert key file."
  fi

}

function update_repos() {
  local exit_status
  log_info "Running apt-get update"
  apt-get -q -o=Dpkg::Use-Pty=0 update 2>&1 | log_trace "${AE_LOG_PHASE_APT}"
  exit_status=$?
  if [[ $exit_status -eq 0 ]]; then
    log_success "Success!"
  else
    log_error "Command apt-get update failed and exited with ${exit_status}"
    log_notice "[1] This is due to either missing keys or wrongly configured repositories."
    log_notice "[2] In some cases repositories might not be available for your version of release."
    log_and_exit "The script cannot proceed with this error." "61"
  fi
}

function update_repos_as_task() {
  log_stage "Update repository metadata"
  update_repos
}

function upgrade_apps() {
  # This function will list up-gradable apps and upgrade it.
  # IF Simulate is set to true this will only list the apps but no upgrade action will be performed.
  local exit_status
  log_stage "Upgrade Packages"
  log_info "Checking and upgrading packages"
  # upgradable is not available in apt-get ignore warning about apt being unstable
  apt list --upgradable 2>&1 | log_trace "${AE_LOG_PHASE_APT}" ||
    log_info "Something went wrong while listing upgradable packages. Please see the log file or run in debug mode for details."

  # only do upgrades if simulate is set to false
  if [ "$AE_RUN_CONFIG_SIMULATE" != "true" ]; then

    DEBIAN_FRONTEND=noninteractive apt-get -q -o=Dpkg::Use-Pty=0 -y upgrade 2>&1 | log_trace "${AE_LOG_PHASE_APT}"
    DEBIAN_FRONTEND=noninteractive apt-get -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" --allow-remove-essential --allow-change-held-packages -fuy dist-upgrade |
      log_trace "${AE_LOG_PHASE_APT}"
    exit_status=$?
  else
    # If  simulate is true, set exit status as 0
    # Simulate flag skips the section above. No point in Checking for exit status
    log_warn "Simulate is set to True. Not performing upgrade!"
    exit_status=0
  fi
  if [[ $exit_status -eq 0 ]]; then
    log_success "Completed"
  else
    log_error "Something went wrong while upgrading packages."
    log_error "Please see the log file for more details."
    log_error "Most of the times its either missing keys or wrongly configured repositories."
  fi
  # Cleanup APT cache (-k)
  _clean_apt_cache

}

function upgrade_system() {
  log_stage "Update repository index/metadata "
  update_repos
  upgrade_apps
}

function purge_not_required() {
  # This function purges not required packages from the list
  # A flag -d MUST be passed for this option to work
  # Not passing a flag and choosing purge will result in error and action being aborted.
  # Simulate is not properly tested and use it with caution!
  # Combination of simulate and purge is UNSTABLE
  # You can modify -d requirement by setting the d_flag_passed=true
  # No validation/checks are done on the list file.
  # Action is dangerous if used carelessly eg. If you are stupid and remove say sudo (why would you??)

  local exit_status
  if [ "$AE_RUN_CONFIG_FLAG_PURGE" == "true" ]; then
    log_stage "Purging packages"

    if [[ ${#AE_RUN_PARSED_PURGE_PKGS[@]} -eq 0 ]]; then
      log_error "Packages to purge is empty!"
      return
    else
      if [ "$AE_RUN_CONFIG_SIMULATE" == "true" ]; then
        log_warn "SIMULATE - using --dry-run"
        apt-get -q -o=Dpkg::Use-Pty=0 -y remove --purge --dry-run "${AE_RUN_PARSED_PURGE_PKGS[@]}" 2>&1 | log_trace "${AE_LOG_PHASE_APT}"
      else
        apt-get -q -o=Dpkg::Use-Pty=0 -y purge "${AE_RUN_PARSED_PURGE_PKGS[@]}" 2>&1 | log_trace "${AE_LOG_PHASE_APT}"
      fi
      exit_status=$?

      if [[ $exit_status -eq 0 ]]; then
        log_success "Done!"
      else
        AE_RUN_STACK_ERR+=("install-error::config.purge")
        log_error "Something went wrong while purging packages."
        log_error "Please see the log file for more details."
      fi
    fi

  else
    log_and_exit "Purge switch is set to false. Did you pass -d along with the command?" "20"
  fi

}

function install_apps() {
  # Function to install apps mentioned in arrays
  # external-repos should always be at last to avoid any errors in previous .
  # No checks are being made on any of the files for validity. One entry per line is recommended.
  # If a package is not available entire collection in the file *.list will not be installed!

  log_stage "Install packages"
  update_repos

  echo ttf-mscorefonts-installer msttcorefonts/accepted-mscorefonts-eula select true | debconf-set-selections
  #Install starts here
  local packages exit_status index
  #shellcheck disable=SC2034
  readonly local package_arrays=(
    administration
    security
    productivity
    multimedia
    development
    other
    external
  )
  for array in "${package_arrays[@]}"; do
    local apt_extra_args=()
    case "${array}" in
    administration) packages=("${AE_RUN_PARSED_ADMINISTRATION_PKGS[@]}") ;;
    security) packages=("${AE_RUN_PARSED_SECURITY_PKGS[@]}") ;;
    productivity) packages=("${AE_RUN_PARSED_PRODUCTIVITY_PKGS[@]}") ;;
    multimedia) packages=("${AE_RUN_PARSED_MULTIMEDIA_PKGS[@]}") ;;
    development) packages=("${AE_RUN_PARSED_DEV_PKGS[@]}") ;;
    other) packages=("${AE_RUN_PARSED_OTHER_PKGS[@]}") ;;
    external) packages=("${AE_RUN_PARSED_EXTERNAL_PKGS[@]}") ;;
    *) log_and_exit "Internal error. Invalid array type" "19" ;;
    esac

    # Chek if array is empty
    if [[ ${#packages[@]} -eq 0 ]]; then
      log_debug "Ignoring empty list of packages in $array"
      continue
    else
      log_info "Installing $array packages"
      # Check if simulate is true
      if [ "$AE_RUN_CONFIG_SIMULATE" == "true" ]; then
        log_warn "SIMULATE - Using --dry-run"
        apt_extra_args+=("--dry-run")
      fi

      apt-get -q -o=Dpkg::Use-Pty=0 -y install "${apt_extra_args[@]}" "${packages[@]}" | log_trace "${AE_LOG_PHASE_APT}"

      exit_status=$?
      unset packages
      if [[ $exit_status -eq 0 ]]; then
        log_success "Done!"
      else
        AE_RUN_STACK_ERR+=("install-error::config.install.apt.${array}")
        log_error "Something went wrong while installing packages in set - $array."
        log_error "Please see the log file for more details."
      fi

    fi
    unset packages
  done
  # Delete DEBs
  _clean_apt_cache

}

function install_debs() {
  # The list file has following format
  # URL to get the deb file

  log_stage "Install DEB packages"
  local index deb_url deb_file_name
  local exit_status apt_fix_status
  for index in "${!AE_RUN_PARSED_DEBFILES[@]}"; do
    deb_url="${AE_RUN_PARSED_DEBFILES[$index]}"
    deb_file="${AE_RUN_TMP_DIR}/$RANDOM$RANDOM.deb"
    if [[ $deb_url =~ ^(https?):\/\/(.*)$ ]]; then
      log_var "deb_url"
      log_var "deb_file"
    else
      log_error "Invalid DEB URL - $deb_url"
      AE_RUN_STACK_ERR+=("config-error::config.install.deb_packages[$index]: ${deb_url}")
      continue
    fi

    log_debug "Downloading - $deb_url"
    if wget -q "$deb_url" -O "${deb_file}" 2>&1 | log_trace "${AE_LOG_PHASE_DEB}"; then
      log_debug "Downloaded"
    else
      log_error "Failed to download deb file!"
      AE_RUN_STACK_ERR+=("download-error::config.install.deb_packages[$index]: ${deb_url}")
      continue
    fi

    # Check if simulate is true
    if [ "$AE_RUN_CONFIG_SIMULATE" == "true" ]; then
      log_warn "SIMULATE - $deb_file Installation!"
      dpkg -i --dry-run "$deb_file" 2>&1 | log_trace "${AE_LOG_PHASE_DEB}"
      exit_status=$?
      apt_fix_status=0
    else
      dpkg -i "$deb_file_name" 2>&1 | log_trace "${AE_LOG_PHASE_DEB}"
      exit_status=$?

      log_debug "Installing missing packages"
      apt-get -q -o=Dpkg::Use-Pty=0 -y install -f 2>&1 | log_trace "${AE_LOG_PHASE_APT}"
      apt_fix_status=$?
    fi

    if [[ $apt_fix_status -eq 0 ]] && [[ $exit_status -eq 0 ]]; then
      log_success "Installed!"
    fi

    if [[ $exit_code -ne 0 ]]; then
      log_error "Some error occurred while installing $index."
      AE_RUN_STACK_ERR+=("deb-install-error::config.install.deb_packages[$index]: ${deb_url}")
    fi

    if [[ $apt_fix_status -ne 0 ]]; then
      log_error "Some error occurred while running apt-get install -f, after installing $index."
      AE_RUN_STACK_ERR+=("apt-fix-error::config.install.deb_packages[$index]: ${deb_url}")
    fi
  done
}

function install_binaries() {
  # The list file has following format
  # <URL>,<filename>
  # If you want to specify relative path you
  # can do so relative to /usr/local/bin
  # Be careful not to rename existing ones
  log_stage "Install static binaries"

  local index bin_url line bin_name
  local exit_status
  for index in "${!AE_RUN_PARSED_BINS[@]}"; do

    entry="${AE_RUN_PARSED_BINS[$index]}"
    bin_name="${entry%%::*}"
    bin_url="${entry##*::}"

    if [[ $bin_url =~ ^(https?):\/\/(.*)$ ]]; then
      log_var "bin_url"
    else
      log_error "Invalid binary file URL - $bin_url"
      AE_RUN_STACK_ERR+=("config-error::config.install.binaries[$index]: ${entry}")
      continue
    fi

    if [[ $bin_name =~ ^([a-zA-z0-9_-]+)$ ]]; then
      log_var "bin_name"
    else
      log_error "Invalid binary file name - $bin_name (MUST match regex - ^([a-zA-z0-9_-]+)\$)"
      AE_RUN_STACK_ERR+=("config-error::config.install.binaries[$index]: ${entry}")
      continue
    fi

    log_info "Downloading - $bin_name"
    if wget -q "$bin_url" -O "${AE_RUN_TMP_DIR}/${bin_name}.static" 2>&1 | log_trace "${AE_LOG_PHASE_BIN}"; then
      log_success "OK"
      log_info "Installing  - $bin_name"
      if [ "$AE_RUN_CONFIG_SIMULATE" == "true" ]; then
        log_warn "SIMULATE - Skipping install"
      else
        if cp -rf "${AE_RUN_TMP_DIR}/${bin_name}.static" /usr/local/bin/"${bin_name}" 2>&1 | log_trace "${AE_LOG_PHASE_BIN}"; then
          log_debug "Copied to /usr.local/bin"
          log_debug "Setting Permissions"
          if __fix_permissions "/usr/local/bin/$bin_name" "755"; then
            log_debug "Successfully set required permissions"
          else
            log_error "Failed to set permission on /usr/local/bin/$bin_name"
            AE_RUN_STACK_ERR+=("set-permissions-error::config.install.binaries[$index]: ${entry}")
          fi
        else
          log_error "Failed to copy $bin_name to /usr/local/bin"
          AE_RUN_STACK_ERR+=("install-error::config.install.binaries[$index]: ${entry}")
        fi
      fi
    else
      log_error "Failed to download $bin_name."
      AE_RUN_STACK_ERR+=("download-error::config.install.binaries[$index]: ${entry}")
    fi
  done
}

function install_snaps() {
  local dependency_packages snapd_options index entry
  dependency_packages=(snapd)

  declare -r snap_edge_suffix="::edge"
  declare -r snap_edge_prefix="edge::"
  declare -r snap_classic_suffix="::classic"
  declare -r snap_classic_prefix="classic::"

  log_stage "Install snap packages"

  if [ "$AE_RUN_CONFIG_SIMULATE" == "true" ]; then
    log_warn "SIMULATE - Skipped installing dependencies!"
  else
    if [[ -f /etc/apt/preferences.d/nosnap.pref ]] && [[ $AE_RUN_SNAP_REMOVE_APT_BLOCK == "true" ]]; then
      log_notice "Removing APT preferences which block snapd install"
      if rm /etc/apt/preferences.d/nosnap.pref; then
        log_success "Snapd is instalable again"
      else
        log_error "Failed to remove APT block on snapd package (LinuxMint-Ovrride)"
        log_error "Snap packages cannot be installed!"
        AE_RUN_STACK_ERR+=("snapd-blocked::config.install.snaps:*")
        return 21
      fi
    fi

    log_info "Install dependencies"
    if _install_dependencies "${dependency_packages[@]}"; then
      log_debug "Installed dependency packages: ${dependency_packages[*]}"
    else
      log_error "Failed to install dependency packages for snaps"
      log_error "Snaps cannot be installed with this error!"
      return 21
    fi

  fi # simulate check

  if [[ ${#AE_RUN_PARSED_SNAPS[@]} -eq 0 ]]; then
    log_warn "Snaps array is empty!"
  else
    for index in "${!AE_RUN_PARSED_SNAPS[@]}"; do
      entry="${AE_RUN_PARSED_SNAPS[$index]}"
      log_info "Installing snap - $entry"
      if [ "$entry" == "" ] || [ "$entry" == " " ]; then
        log_warn "Found an empty entry, Ignoring"
        continue
      fi

      # Reset options
      declare -a snapd_options=("--color=never")
      # Build snap cli command
      if [[ ${entry} == *"classic::"* ]] || [[ ${entry} == *"::classic"* ]]; then
        snapd_options+=("--classic")
        entry="${entry#"$snap_classic_prefix"}"
        entry="${entry%"$snap_classic_suffix"}"
      fi

      if [[ ${entry} == *"edge::"* || ${entry} == *"::edge"* ]]; then
        snapd_options+=("--edge")
        entry="${entry#"$snap_edge_prefix"}"
        entry="${entry%"$snap_edge_suffix"}"
      fi
      log_debug "Options for ${entry} are ${snapd_options[*]}"

      if [ "$AE_RUN_CONFIG_SIMULATE" == "true" ]; then
        log_warn "SIMULATE - skipping ${entry} installation"
      else

        if snap install "${snapd_options[@]}" "$entry" 2>&1 | log_trace "${AE_LOG_PHASE_SNAP}"; then
          log_success "$entry installed successfully."
        else
          log_error "Failed!"
          AE_RUN_STACK_ERR+=("install-error::config.install.snaps[$index]: ${entry}")
        fi
      fi
    done
  fi

}

function __autopilot_run_task() {
  # checks flags set for each task/function and runs it
  # Arguments Two
  # ARG -1 : global flag variable to check
  # ARG -2: Function Name to execute
  local flag=${1}
  local runnable=${2}

  if [ "${flag}" == "true" ]; then
    log_debug "Executing Function $runnable"
    "$runnable"
  else
    log_debug "Task : $runnable is not enabled"
  fi
  unset runnable
}

function all_in_one() {
  #Wrapper for all options
  log_debug "Option: ALL IN ONE, function name: all_in_one"
  update_repos_as_task
  upgrade_apps
  add_ppas
  add_repositories
  install_apps
  install_debs
  purge_not_required
  install_binaries
  install_snaps

}

function _prompt_confirmation() {
  # Function to confirm whether action selected should be performed or not.
  # Accepts 2 arguments
  # ARG-2 Message to be displayed in confirmation box
  # ARG-2 name of the function to execute
  # Depends on whiptail
  # To overide and say yes to all dialog pass -y as command line option while running the script.
  local confirm_msg="${1}"   #Message shown in Confirmation dialogue
  local exec_function="${2}" #Function to run if user selected yes
  COLUMNS=$(tput cols)
  LINES=$(tput lines)
  if [[ ${AE_AUTOPILOT} == "true" ]]; then
    log_debug "Executing: $exec_function (AUTOPILOT)"
    $exec_function
  else
    log_debug "Confirming  $exec_function."
    # shellcheck disable=SC2086
    if (whiptail --title "Ubuntu Post-Install Script" --yesno "$confirm_msg" $LINES $COLUMNS $((LINES - 12))); then
      # execute the function
      log_debug "Executing: $exec_function (WHIPTAIL)"
      $exec_function
    else
      log_debug "User selected No for $exec_function, Returning to main menu."
      _process_menu
    fi
  fi
}

function _process_menu() {
  local whiptail_exitstatus task COLUMNS LINES
  log_debug "Displaying Main menu"
  COLUMNS=$(tput cols)
  LINES=$(tput lines)
  #export COLUMNS LINES
  # shellcheck disable=SC2086
  task=$(whiptail \
    --notags \
    --backtitle "$AE_SCRIPT" \
    --title "Ubuntu Post-Install Script" \
    --menu "\nWhat would you like me to do?" \
    --cancel-button "Quit" \
    $LINES $COLUMNS $((LINES - 12)) \
    update 'Update Repository Metadata' \
    upgrade 'Upgrade Packages' \
    repo 'Add Repositories' \
    ppas 'Add PPAs' \
    apps 'Install APT Packages' \
    debs 'Install DEB packages' \
    bin 'Install static binaries' \
    snaps 'Install snap packages' \
    purge 'Purge not required packages' \
    all 'All the tasks mentioned above' \
    3>&1 1>&2 2>&3)

  __menu_info_add_repo="
  Settings for additional repositories is set as follows.
  -------------------------------------------------------
  Brave Browser                : $AE_RUN_CONFIG_REPO_BRAVE_BROWSER
  Docker Community Edition     : $AE_RUN_CONFIG_REPO_DOCKER
  Element.io/Riot.im           : $AE_RUN_CONFIG_REPO_ELEMENT_IO
  GitHub CLI                   : $AE_RUN_CONFIG_REPO_GH
  Google - Bazel               : $AE_RUN_CONFIG_REPO_BAZEL
  Google - Chrome              : $AE_RUN_CONFIG_REPO_CHROME
  Google Cloud - SDK           : $AE_RUN_CONFIG_REPO_GCP
  Google Cloud - GCSFUSE       : $AE_RUN_CONFIG_REPO_GCSFUSE
  Google Cloud - gVisor        : $AE_RUN_CONFIG_REPO_GVISOR
  Hashicorp Packages           : $AE_RUN_CONFIG_REPO_HASHICORP
  Mendeley for Desktop         : $AE_RUN_CONFIG_REPO_MENDELEY
  Microsoft - Azure CLI        : $AE_RUN_CONFIG_REPO_AZURECLI
  Microsoft - Edge             : $AE_RUN_CONFIG_REPO_EDGE
  Microsoft - Skype            : $AE_RUN_CONFIG_REPO_SKYPE
  Microsoft - VSCode           : $AE_RUN_CONFIG_REPO_VSCODE
  Miniconda (anaconda)         : $AE_RUN_CONFIG_REPO_MINICONDA
  NeuroDebian                  : $AE_RUN_CONFIG_REPO_NEURODEBIAN
  Podman (from Kubic Project)  : $AE_RUN_CONFIG_REPO_PODMAN
  ProtonVPN Client             : $AE_RUN_CONFIG_REPO_PROTONVPN
  ROS                          : $AE_RUN_CONFIG_REPO_ROS
  ROS2                         : $AE_RUN_CONFIG_REPO_ROS2
  Signal for Desktop           : $AE_RUN_CONFIG_REPO_SIGNAL
  Spotify                      : $AE_RUN_CONFIG_REPO_SPOTIFY
  Slack                        : $AE_RUN_CONFIG_REPO_SLACK
  SublimeText Editor           : $AE_RUN_CONFIG_REPO_SUBLIMETEXT
  Vivaldi Browser              : $AE_RUN_CONFIG_REPO_VIVALDI"

  if [[ $AE_RUN_IS_DEBIAN != "true" ]]; then
    __menu_info_add_repo="$__menu_info_add_repo
  Multiverse                   : $AE_RUN_CONFIG_REPO_UBUNTU_MULTIVERSE
  Universe                     : $AE_RUN_CONFIG_REPO_UBUNTU_UNIVERSE
  Restricted                   : $AE_RUN_CONFIG_REPO_UBUNTU_RESTRICTED
  "
  else
    __menu_info_add_repo="$__menu_info_add_repo
  Non-Free                     : $AE_RUN_CONFIG_REPO_DEBIAN_CONTRIB
  Contrib                      : $AE_RUN_CONFIG_REPO_DEBIAN_CONTRIB
  "
  fi

  __menu_info_add_repo="$__menu_info_add_repo

  Proceed with adding these repositories?"

  __menu_info_upgrade="
  This action will upgrage already installed packages on your system.

  Please pin package versions to avoid them from being automatically
  updated.
  -------------------------------------------------------

  Proceed with this action?
  "

  __menu_info_update="
  This action will update repository metadata. This action
  will simple run apt-get update as root.
  -------------------------------------------------------

  Proceed with this action?
  "

  __menu_info_ppa="
  This action will add PPAs from the config to your system.
  Some dependency packages like curl and software-properties
  might get installed to enable adding these PPAs.
  -------------------------------------------------------

  Proceed with this action?
  "

  __menu_info_apps="
  This action will install packages defined in your config.
  As there might be hundreds of packages they are not displayed
  here. Please ensure that packages are valid and are available
  on your distribution. This might take some time depending on
  your Internet connection and CPU.
  -------------------------------------------------------

  Proceed with this action?
  "

  __menu_info_purge="
  This action can remove packages which come
  preinstalled on Ubuntu/Debian installation.
  Use this with caution! Removing a core dependency might
  lead t a broken system!
  -------------------------------------------------------

  Proceed with this action?
  "

  __menu_info_all="
  This will run ALL the tasks except
  deleting logs, purging PPAs and removing repos.

  Order of execution is as follows.

  - Update repository metadata
  - Upgrade packages
  - Add Repositories
  - Add PPAs
  - Install Packages
  - Install DEB files
  - Install Static binaries
  - Install Snap Packages
  -------------------------------------------------------

  Proceed with this action?
  "

  __menu_info_debs="
  This will download and install debian packages mentioned in
  the config file. Please note that this is slightly less secure,
  as GPG signature verification is not done on the packages
  downloaded.
  -------------------------------------------------------

  Proceed with this action?
  "

  __menu_info_snaps="
  Install snap packages. If your system did not come preinstalled with
  snapd, it will be installed. If you are running a DNS server on the
  machine, lxd's dnsmasq might cause port conflicts.

  You must specify snaps under correct category.
  - classic (no confinement)
  - normal (default snap confinement)
  - edge (beta versions and some unconfined packages)

  ::WARNING::
  This task will fail inside docker containers!
  -------------------------------------------------------

  Proceed with this action?
  "

  __menu_info_bin="
  Install static binaries. This task will download and put
  your binaries in /usr/local/bin. Please ensure to use correct
  binaries for your system and ensure that
  /usr/local/bin is in your PATH.
  -------------------------------------------------------

  Proceed with this action?
  "

  whiptail_exitstatus=$?
  log_debug "Whiptail Exit status is : $whiptail_exitstatus"
  if [ $whiptail_exitstatus = 0 ]; then
    log_debug "Whiptail Task is: $task"
    case $task in
    update)
      _prompt_confirmation "$__menu_info_update" "update_repos_as_task"
      ;;
    upgrade)
      _prompt_confirmation "${__menu_info_upgrade}" "upgrade_apps"
      ;;
    ppas)
      _prompt_confirmation "${__menu_info_ppa}" "add_ppas"
      ;;
    repo)
      _prompt_confirmation "$__menu_info_add_repo" "add_repositories"
      ;;
    apps)
      _prompt_confirmation "$__menu_info_apps" "install_apps"
      ;;
    purge)
      _prompt_confirmation "${__menu_info_purge}" "purge_not_required"
      ;;
    debs)
      _prompt_confirmation "${__menu_info_debs}" "install_debs"
      ;;
    bin)
      _prompt_confirmation "${__menu_info_bin}" "install_binaries"
      ;;
    snaps)
      _prompt_confirmation "${__menu_info_snaps}" "install_snaps"
      ;;
    all)
      _prompt_confirmation "${__menu_info_all}" "all_in_one"
      ;;
    esac
  else
    log_debug "Whiptail Exit code : $whiptail_exitstatus"
    log_debug "Exiting because user selected Quit or Whiptail has non zero exit code."
  fi
}

function __runtime_env_checks() {
  # global Associative array
  declare -Ag AE_RUN_RUNTIME_DETECT=([GITHUB_ACTIONS]=false [AZURE_PIPELINE]=false [CI]=false [KVM]=false [PODMAN]=false [DOCKER]=false [KVM]=false [HYPERV]=false [WSL]=false)
  if [ "$bool_skip_env_checks" == "true" ]; then
    log_debug "Skipping Run environment checks"
  else
    log_stage "Running environment checks"

    # Github Actions
    if [ "$GITHUB_ACTIONS" == "true" ]; then
      AE_RUN_RUNTIME_DETECT['GITHUB_ACTIONS']=true
    fi

    # Check if running in CI & Containers
    if [ "$TF_BUILD" == "True" ]; then
      AE_RUN_RUNTIME_DETECT['AZURE_PIPELINE']=true
    fi

    # Generic CI
    if [ "$CI" == "true" ]; then
      AE_RUN_RUNTIME_DETECT['CI']=true
    fi

    # WSL
    if grep -q Microsoft /proc/sys/kernel/osrelease; then
      AE_RUN_RUNTIME_DETECT['WSL']=true
    fi

    #============================ Docker & Podman ====================================
    if test -f /run/.containerenv; then
      AE_RUN_RUNTIME_DETECT['PODMAN']=true
    fi

    if test -f /.dockerenv; then
      AE_RUN_RUNTIME_DETECT['DOCKER']=true
    fi

    # declare -Ag AE_RUN_RUNTIME_DETECT=([GITHUB_ACTIONS]=false [AZURE_PIPELINE]=false [CI]=false [KVM]=false [PODMAN]=false [DOCKER]=false [KVM]=false [HYPERV]=false [WSL]=false)
    log_dev "KVM              : ${AE_RUN_RUNTIME_DETECT[KVM]}"
    log_dev "HYPERV           : ${AE_RUN_RUNTIME_DETECT[HYPERV]}"
    log_dev "WSL              : ${AE_RUN_RUNTIME_DETECT[WSL]}"
    log_dev "DOCKER           : ${AE_RUN_RUNTIME_DETECT[DOCKER]}"
    log_dev "PODMAN           : ${AE_RUN_RUNTIME_DETECT[PODMAN]}"
    log_dev "GH-ACTIONS       : ${AE_RUN_RUNTIME_DETECT[GITHUB_ACTIONS]}"
    log_dev "AZURE PIPELEINES : ${AE_RUN_RUNTIME_DETECT[AZURE_PIPELINE]}"
    log_dev "CI               : ${AE_RUN_RUNTIME_DETECT[CI]}"
  fi

}

function display_version() {
  printf "${AE_SCRIPT} version ${AE_VERSION}"
}

function display_usage() {
  #Prints out help menu
  cat <<EOF
A Post Installation Script for Ubuntu, Debian,
Linux-Mint, elementaryOS, Pop!_OS, MX Linux etc.

${AE_COLOR_YELLOW}USAGE: ${AE_COLOR_NC}
  [sudo] ./${AE_SCRIPT} [OPTION]... config-file|config-url

${AE_COLOR_BLUE}OPTIONS:${AE_COLOR_NC}
  -v,  --version      Display version info.
  -h,  --help         Display this help message.

${AE_COLOR_ORANGE}CONFIGURATION:${AE_COLOR_NC}
  -A, --autopilot     Enables AUTOPILOT mode(No Prompts).
  -d, --purge         Enable Purging packages.
  -p, --pre-release   Use repositories for previous releases.
  --fix-mode-lts      Use previous LTS release as fallback when using --pre-release
  -k, --keep-debs     Do not invoke apt-clean after installing packages.
  -l, --delete-log    Delete the logfile. (./log/after-effects.log)

${AE_COLOR_PINK}LOGS:${AE_COLOR_NC}
  --debug             Prints debug logs.
  --trace             Prints trace level logs.

${AE_COLOR_GRAY}DEBUG:
  -s, --simulate      Try not to make changes to system. See Docs for limitaions!
  --no-env-checks     Skip some env checks.
  --no-version-check  Skip checking for latest version.
  --nx                Just process config and exit.
${AE_COLOR_NC}
${AE_COLOR_MAGENTA}DOCUMENTATION & BUGS: ${AE_COLOR_NC}
  Report bugs to      ${AE_COLOR_CYAN}https://ae.prasadt.com/issues${AE_COLOR_NC}
  Documentation       ${AE_COLOR_CYAN}https://ae.prasadt.com${AE_COLOR_NC}
  License             ${AE_COLOR_CYAN}GPLv3${AE_COLOR_NC}
EOF
}

function __process_priority_flags() {
  # Process command line arguments which does not require root.
  if [[ $# -eq 0 ]]; then
    log_error "No arguments specified! See Usage Below"
    display_usage
    exit 1
  elif [[ $# -eq 1 ]]; then
    while [ "${1}" != "" ]; do
      case ${1} in
      -v | --version)
        display_version
        exit 0
        ;;
      -l | --delete-log)
        delete_log_file
        ;;
      -h | --help)
        display_usage
        exit 0
        ;;
      -*)
        log_error "This does not appear to be a valid option"
        log_error "Non action options take more than one argument!"
        exit 1
        ;;
      esac
      shift
    done
  fi
}

function __process_nx_flag() {
  while [ "${1}" != "" ]; do
    case ${1} in
    -n | --nx) declare -gr AE_RUN_NX="true" ;;
    esac
    shift
  done
}

function main() {
  # MASK Exit handler
  __init_core_variables

  # Options L1 and L2 Processing
  __process_priority_flags "$@"
  __process_nx_flag "$@"

  log_stage "Initialization & checks"
  log_info "Permission checks"

  if [[ $AE_RUN_NX == "true" ]]; then
    __init_logfile
    log_dev "Running in NX mode"
  elif [[ $EUID -ne 0 ]]; then
    log_error "Insufficient privileges!"
    log_error "This script must be run as root"
    log_error "Please use sudo ./$AE_SCRIPT to run this as root."
    exit 2
  else
    __init_logfile
    log_success "OK! Running as root"
  fi

  # Init vars
  __setup_platform_vars

  # Process command line arguments.
  declare -a NON_OPTION_ARGS
  while [ "${1}" != "" ]; do
    case ${1} in
    -s | --simulate)
      readonly AE_RUN_CONFIG_SIMULATE="true"
      log_property "Simulate" "ENABLED" "3"
      ;;
    --fix-mode-lts)
      AE_RUN_FIX_MODE_LTS="true"
      log_property "FIX MODE" "LTS" "2"
      ;;
    -p | --pre-release)
      AE_RUN_FIX_UPCOMING="true"
      log_property "FIX MODE" "PRE-RELEASE" "2"
      ;;
    -d | --purge)
      AE_RUN_CONFIG_FLAG_PURGE="true"
      log_notice "Purge packages is set to true."
      log_warn "No checks are being made on the packages in the list."
      ;;
    -k | --keep-debs | keep-pkgs)
      AE_RUN_CONFIG_FLAG_PRESERVE_PKGS="true"
      log_notice "Will keep downloaded packages."
      ;;
    -V | --no-version-check)
      AE_RUN_VERSION_CHECK="false"
      ;;
    -A | --autopilot)
      log_property "Autopilot" "ENABLED" "2"
      readonly AE_AUTOPILOT="true"
      ;;
    --use-uf-mirror)
      log_warn "Will use Uni-Freiburg mirror(s) if available"
      readonly AE_RUN_CONFIG_FLAG_UF_MIRROR="true"
      ;;
    -E | --skip-env-checks) readonly bool_skip_env_checks="true" ;;
    # Debug options
    --debug) AE_DEBUG=1 ;;
    --trace) AE_DEBUG=2 ;;
    -n | --nx) : ;;
    --config | -c | --config-file | --remote-yaml | -r | -R)
      log_error "Option ${1} was removed in version 9.x"
      log_and_exit "Please specify path to config file or URL as an argument, not as flag/option" 26
      ;;
    # The following arguments should always be used as the only arguments.
    -l | --delete-logfile) log_and_exit "-l or --delete-logfile should be the only argument." "23" ;;
    -v | --version) log_and_exit "-v or --version should be the only argument." "23" ;;
    -h | --help) log_and_exit "-h or --help should be the only argument." "23" ;;
    -*) log_and_exit "Invalid option: $1" "22" ;;
    *) NON_OPTION_ARGS+=("${1}") ;;
    esac
    shift
  done

  log_property "ARGUMENTS" "${NON_OPTION_ARGS[*]}"

  if [[ ${#NON_OPTION_ARGS[@]} -ne 1 ]]; then
    log_and_exit "Invalid number of arguments: ${#NON_OPTION_ARGS[@]}, expected 1" 7
  else
    declare -r config_arg="${NON_OPTION_ARGS[0]}"

    case $config_arg in
    http://* | https://*)
      log_property "Config file" "REMOTE" 4
      # shellcheck disable=SC2034
      readonly AE_RUN_REMOTE_CONFIG="true"
      readonly AE_REMOTE_CONFIG_URL="${config_arg}"
      ;;
    *)
      readonly AE_CONFIG_FILE="${config_arg}"
      readonly AE_RUN_LOCAL_CONFIG="true"
      log_property "Config file" "LOCAL" 2
      ;;
    esac
  fi

  # Check dependencies
  declare -ar after_effects_core_dependencies=(ping ps grep cut tr awk)

  log_info "Checking dependencies"

  if [[ ${AE_AUTOPILOT} != "true" ]]; then
    if command -v whiptail >/dev/null; then
      log_property "whiptail" "INSTALLED"
    else
      log_property "whiptail" "NOT INSTALLED" "4"
      log_error "--autopilot is not enabled, but whitptail binary is not found!"
      log_and_exit "Missing dependency - whiptail" "1"
    fi
  else
    log_debug "whiptail is not required as autopilot is active."
  fi

  if ! _check_dependencies "${after_effects_core_dependencies[@]}"; then
    log_and_exit "Missing depdendencies" "1"
  fi

  if _check_dependencies "wget" || _check_dependencies "curl"; then
    log_debug "wget or curl is available"
  else
    log_and_exit "wget and curl both are missing!" "1"
  fi

  # Prime and Print Runtime Info
  __print_runtime_info
  __test_internet

  log_info "Checking configuration"

  # Handle Remote YAML
  log_var "AE_RUN_LOCAL_CONFIG"
  log_var "AE_CONFIG_FILE"
  log_var "AE_RUN_REMOTE_CONFIG"
  log_var "AE_REMOTE_CONFIG_URL"

  if [[ -z ${AE_CONFIG_FILE} ]] && [[ -z ${AE_REMOTE_CONFIG_URL} ]]; then
    log_error "Undefined configuration!" 63
  fi

  if [ "$AE_RUN_LOCAL_CONFIG" == "true" ] && [ ! -f "$AE_CONFIG_FILE" ]; then
    log_and_exit "Config file you have specified is not found or not accessible" "36"
  fi

  # Checks CI & Containers If running on EC2/GCP/Azure/DO
  __runtime_env_checks

  # Take care of Mint and other distros
  _fix_ubuntu_derivatives

  # Get Remote Config File/s, check version & configure
  _version_checks

  _set_yaml_config

  if [[ ! -t 1 ]] && [[ $AE_AUTOPILOT != "true" ]]; then
    log_error "Terminal is not interactive, yet you have not specified --autopilot flag!"
    log_and_exit "Non-interactive terminal requires --autopilot" "54"
  else
    log_debug "Terminal is interactive, no need to enforce autopilot usage"
  fi

  # Test if any apt-get ops are running
  log_stage "Check for conflicting apps"
  _test_conflicting_apps

  if [[ $AE_RUN_NX == "true" ]]; then
    log_dev "Will not execute any tasks!"
    AE_RUN_STACK_ERR+=("nx-mode-default::cli.nx")
    exit 255
  fi

  # Autopilot
  log_stage "Checking for AUTOPILOT"
  if [[ ${AE_AUTOPILOT} == "true" ]]; then
    log_success "Autopilot is ENABLED"
    #log_and_exit "Because I can" "255"
    __autopilot_run_task "$AE_RUN_CONFIG_TASK_UPDATE" "update_repos_as_task"
    __autopilot_run_task "$AE_RUN_CONFIG_TASK_UPGRADE" "upgrade_apps"
    __autopilot_run_task "$AE_RUN_CONFIG_TASK_REPO" "add_repositories"
    __autopilot_run_task "$AE_RUN_CONFIG_TASK_PPA" "add_ppas"
    __autopilot_run_task "$AE_RUN_CONFIG_TASK_APT" "install_apps"
    __autopilot_run_task "$AE_RUN_CONFIG_TASK_DEBS" "install_debs"
    __autopilot_run_task "$AE_RUN_CONFIG_TASK_PURGE" "purge_not_required"
    __autopilot_run_task "$AE_RUN_CONFIG_TASK_BIN" "install_binaries"
    __autopilot_run_task "$AE_RUN_CONFIG_TASK_SNAPS" "install_snaps"
  else
    sleep 2
    log_notice "Autopilot is Inactive"
    _process_menu
  fi

}

#Run Main
main "$@"
